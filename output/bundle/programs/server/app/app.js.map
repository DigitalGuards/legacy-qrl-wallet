{"version":3,"sources":["meteor://ðŸ’»app/imports/startup/both/index.js","meteor://ðŸ’»app/imports/startup/both/nodes.js","meteor://ðŸ’»app/imports/startup/server/index.js","meteor://ðŸ’»app/chimp.js","meteor://ðŸ’»app/server/main.js"],"names":["module","link","SHOR_PER_QUANTA","WALLET_VERSION","QRLPROTO_SHA256","version","protoSha256","objectSha256","getQrlProtoShasum","nodeVersion","callback","itemsProcessed","forEach","qrlnode","index","array","length","numberToString","num","math","require","format","notation","lowerExp","upperExp","Infinity","decimalToBinary","decimalNumber","binaryArray","unshift","Math","floor","DEFAULT_NETWORKS","id","name","disabled","explorerUrl","type","healthy","nodes","grpc","state","height","Meteor","settings","public","defaultNetworks","e","findNetworkData","key","LocalStore","get","nodeData","objFound","_","find","obj","v","check","BrowserPolicy","helpers","default","protoloader","tmp","fs","async","CryptoJS","util","TransportNodeHid","Qrl","PROTO_PATH","Assets","absoluteFilePath","split","content","disallowInlineScripts","allowStyleOrigin","allowFontOrigin","allowFontDataUrl","allowDataUrlForAll","qrlClient","toBuffer","ab","buffer","Buffer","from","errorCallback","error","message","alert","d","Date","getTime","toUTCString","console","log","meteorError","Error","loadGrpcClient","endpoint","options","keepCase","longs","String","enums","defaults","oneofs","includeDirs","load","then","packageDefinitionBase","baseGrpcObject","loadPackageDefinition","client","qrl","Base","credentials","createInsecure","getNodeInfo","err","res","qrlProtoFilePath","fileSync","mode","prefix","postfix","writeFile","grpcProto","fsErr","allowUnchecksummedNodes","readFile","errR","contents","protoFileWordArray","lib","WordArray","create","calculatedProtoHash","SHA256","toString","enc","Hex","verified","value","walletProto","packageDefinition","grpcObject","grpcObjectString","JSON","stringify","inspect","showHidden","depth","protoObjectWordArray","calculatedObjectHash","verifiedObject","PublicAPI","myError","connectToNode","hasOwnProperty","getNodeState","response","loadErr","loadResponse","errState","checkNetworkHealth","userNetwork","networkHealthy","network","connectNodes","networkIndex","networkNodes","node","nodeIndex","parseInt","info","block_height","qrlApi","api","request","activeNodes","push","bestNode","relayed","details","apiEndpoint","getKnownPeers","getStats","getObject","helpersaddressTransactions","output","each","transactions_detail","tx","txEdited","transfer","hexlified","addrs_to","txOutput","token","symbol","slice","owner","transfer_token","token_txhash","coinbase","addr_to","transaction_hash","master_addr","public_key","signature","block_header_hash","addr_from","getTransactionsByAddress","getTokensByAddress","getMultiSigAddressesByAddress","getMultiSigSpendTxsByAddress","getOTS","getFullAddressState","address","getAddressState","newOtsBitfield","lowestUnusedOtsKey","otsBitfieldLength","thisOtsBitfield","ots_bitfield","undefined","item","thisDecimal","Uint8Array","thisBinary","reverse","startIndex","i","thisOtsIndex","ots_counter","totalKeysConsumed","ots","keys","nextKey","keysConsumed","table","getMultiSigAddressState","getTxnHash","txnHash","query","transferCoins","addresses_to","amounts","fee","xmss_pk","xmssPk","message_data","transferResponse","createMultiSig","fromAddress","signatories","weights","threshold","spendMultiSig","multi_sig_address","expiry_block_number","voteMultiSig","shared_key","unvote","getHeight","confirmTransaction","confirmTxn","transaction_signed","extended_transaction_unsigned","relayedThrough","addrsTo","addrsToFormatted","bufItem","txnResponse","waterfall","wfcb","tx_hash","hashResponse","confirmMultiSigCreate","multi_sig_create","signatoriesFormatted","confirmMultiSigSpend","multi_sig_spend","confirmMultiSigVote","multi_sig_vote","createTokenTxn","decimals","initial_balances","initialBalances","xmss_ots_index","xmssOtsKey","createMessageTxn","createKeybaseTxn","createGithubTxn","confirmTokenCreation","initialBalancesFormatted","itemFormatted","confirmMessageCreation","message_hash","confirmKeybaseCreation","confirmGithubCreation","createTokenTransferTxn","tokenHash","confirmTokenTransfer","Fitem","apiCall","apiUrl","HTTP","data","transport","createTransport","ledgerGetState","cb","QrlLedger","get_state","close","ledgerPublicKey","publickey","ledgerAppVersion","get_version","ledgerLibraryVersion","library_version","ledgerVerifyAddress","viewAddress","ledgerCreateTx","sourceAddr","destAddr","destAmount","sourceAddrBuffer","feeBuffer","destAddrFinal","destAmountFinal","createTx","ledgerRetrieveSignature","txn","retrieveSignature","ledgerSetIdx","otsKey","setIdx","idxResponse","ledgerCreateMessageTx","messageBuffer","createMessageTx","methods","unblock","wrapAsync","status","Object","getPeers","txhash","transaction","transactionType","symbolRequest","thisSymbolResponse","parseTokenAndTransferTokenTx","addressTransactions","targets","result","arr","thisRequest","thisTxnHashResponse","thisTxn","totalTransferred","explorer","outputs","from_hex","from_b32","ots_key","substring","block","header","block_number","timestamp","timestamp_seconds","helpersResponse","amount","to","fe","QRLvalue","apiUrlUSD","responseUSD","usd","Last","Array","Match","Any","isServer","startup","setInterval","exports","webdriverio","desiredCapabilities","chromeOptions","args","isHeadless"],"mappings":"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","file":"/app.js","sourcesContent":["// Import modules used by both client and server through a single index entry point\n/* eslint no-console:0 */\n/* eslint no-global-assign: 0 */\n/* eslint no-unused-vars: 0 */\n/* eslint max-len: 0 */\n/* global pkRawToB32Address, hexOrB32, rawToHexOrB32, anyAddressToRawAddress, stringToBytes, binaryToBytes, bytesToString, bytesToHex, hexToBytes, toBigendianUint64BytesUnsigned, numberToString, decimalToBinary */\n/* global getMnemonicOfFirstAddress, getXMSSDetails, isWalletFileDeprecated, waitForQRLLIB, addressForAPI, binaryToQrlAddress, toUint8Vector, concatenateTypedArrays, getQrlProtoShasum */\n/* global  getBalance, otsIndexUsed, ledgerHasNoTokenSupport, resetLocalStorageState, nodeReturnedValidResponse */\n/* global POLL_TXN_RATE, POLL_MAX_CHECKS, DEFAULT_NETWORKS, findNetworkData, SHOR_PER_QUANTA, WALLET_VERSION, QRLPROTO_SHA256,  */\n\nimport './nodes.js'\n\n// Define amount of SHOR contained per QUANTA (10^9)\nSHOR_PER_QUANTA = 1000000000\n\n// qrl-wallet Version\nWALLET_VERSION = '1.8.1'\n\n// qrl.proto sha256 sum for each release of QRL Node\nQRLPROTO_SHA256 = [\n  {\n    version: '1.0.0',\n    protoSha256:\n      '4565ecb1a7e3852bd46a8e357bbcc95dfc7a81bec761df50550d567a71bf6ed6',\n    objectSha256:\n      'd538cc0164f26cdda4e082cca548f531038d70a4b879495a4483f66e4c53cae9',\n  },\n  {\n    version: '1.1.0',\n    protoSha256:\n      '9daaa59da125167ae825bf182a65c7f12a3af78f2cc351991a5faae03fb99892',\n    objectSha256:\n      '7e841e796be583d30066e33f8d9b344ffe8160eb02fecc6cb4df80f7823e932c',\n  },\n  {\n    version: '1.1.1',\n    protoSha256:\n      '9daaa59da125167ae825bf182a65c7f12a3af78f2cc351991a5faae03fb99892',\n    objectSha256:\n      '7e841e796be583d30066e33f8d9b344ffe8160eb02fecc6cb4df80f7823e932c',\n  },\n  {\n    version: '1.1.2',\n    protoSha256:\n      '9daaa59da125167ae825bf182a65c7f12a3af78f2cc351991a5faae03fb99892',\n    objectSha256:\n      '7e841e796be583d30066e33f8d9b344ffe8160eb02fecc6cb4df80f7823e932c',\n  },\n  {\n    version: '1.1.3',\n    protoSha256:\n      '9daaa59da125167ae825bf182a65c7f12a3af78f2cc351991a5faae03fb99892',\n    objectSha256:\n      '7e841e796be583d30066e33f8d9b344ffe8160eb02fecc6cb4df80f7823e932c',\n  },\n  {\n    version: '1.1.4',\n    protoSha256:\n      '71a51e5222c50a7575f1a92c365f6674bae938cebae678416da80f22fa8327b9',\n    objectSha256:\n      '6589d425a16741104bbeceaa9ab2a1dbb33ff47453b90e29c3ee540dbad22df5',\n  },\n  {\n    version: '1.1.5',\n    protoSha256:\n      '71a51e5222c50a7575f1a92c365f6674bae938cebae678416da80f22fa8327b9',\n    objectSha256:\n      '6589d425a16741104bbeceaa9ab2a1dbb33ff47453b90e29c3ee540dbad22df5',\n  },\n  {\n    version: '1.1.6',\n    protoSha256:\n      '71a51e5222c50a7575f1a92c365f6674bae938cebae678416da80f22fa8327b9',\n    objectSha256:\n      '6589d425a16741104bbeceaa9ab2a1dbb33ff47453b90e29c3ee540dbad22df5',\n  },\n  {\n    version: '1.1.7 python',\n    protoSha256:\n      '71a51e5222c50a7575f1a92c365f6674bae938cebae678416da80f22fa8327b9',\n    objectSha256:\n      '6589d425a16741104bbeceaa9ab2a1dbb33ff47453b90e29c3ee540dbad22df5',\n  },\n  {\n    version: '1.1.8 python',\n    protoSha256:\n      '71a51e5222c50a7575f1a92c365f6674bae938cebae678416da80f22fa8327b9',\n    objectSha256:\n      '6589d425a16741104bbeceaa9ab2a1dbb33ff47453b90e29c3ee540dbad22df5',\n  },\n  {\n    version: '1.1.9 python',\n    protoSha256:\n      '71a51e5222c50a7575f1a92c365f6674bae938cebae678416da80f22fa8327b9',\n    objectSha256:\n      '6589d425a16741104bbeceaa9ab2a1dbb33ff47453b90e29c3ee540dbad22df5',\n  },\n  {\n    version: '1.1.10 python',\n    protoSha256:\n      '00032d07d4b4637103db15b3d68ae019c14988e870475832af6eb5bd390e04f5',\n    objectSha256:\n      '8c31491c3f6f7c3df96228644ded4ae5f3848fa74a971f3dfc8e4db684701dca',\n  },\n  {\n    version: '1.1.11 python',\n    protoSha256:\n      '00032d07d4b4637103db15b3d68ae019c14988e870475832af6eb5bd390e04f5',\n    objectSha256:\n      '8c31491c3f6f7c3df96228644ded4ae5f3848fa74a971f3dfc8e4db684701dca',\n  },\n  {\n    version: '1.1.13 python',\n    protoSha256:\n      'df0f718b6a8a31ff3b746e74bcf461fe48c6d9ddac604826aa2b2891b4a7ed2a',\n    objectSha256:\n      'a985aee431dae781576e3237f1a47d23ad579eacd5b9f4a6fddf6fd3833f1e12',\n  },\n  {\n    version: '1.1.15 python',\n    protoSha256:\n      'df0f718b6a8a31ff3b746e74bcf461fe48c6d9ddac604826aa2b2891b4a7ed2a',\n    objectSha256:\n      'a985aee431dae781576e3237f1a47d23ad579eacd5b9f4a6fddf6fd3833f1e12',\n  },\n  {\n    version: '1.1.15+65.gf434f320.dirty python',\n    protoSha256:\n      '9c273e5aa3c88c8a225dd16a76203a95ca23f737599ebab991e1087badec7598',\n    objectSha256:\n      'ffab214fb7f1497209b6a513c5a9053a0c5566741a91c836482e1057c0e57773',\n  },\n  {\n    version: '2.0.0+0.gbcf7644.dirty python',\n    protoSha256:\n      'b24a5c41468610914da57ac92f3cc2f74d89575f2626d5968f84ca211f55410c',\n    objectSha256:\n      'f6d7eb01dbb38707bb39d760619d05de01ae456a95060cb4849eafc3c358d12c',\n  },\n  {\n    version: '2.0.1+0.gf457b3a.dirty python',\n    protoSha256:\n      'b24a5c41468610914da57ac92f3cc2f74d89575f2626d5968f84ca211f55410c',\n    objectSha256:\n      '693b179b68016896c80d1b3660354549706d70e24d97240ce0aa7e9416c2b4aa',\n  },\n  {\n    version: '2.0.1+0.gf457b3a.dirty python (null)',\n    protoSha256:\n      'b24a5c41468610914da57ac92f3cc2f74d89575f2626d5968f84ca211f55410c',\n    objectSha256:\n      'f6b06eac25bd5740fe6877d5e604429e6aadd93dee668e7412051decbf34add2',\n  },\n  {\n    version: '2.0.0+0.gbcf7644.dirty python (null)',\n    protoSha256:\n      'b24a5c41468610914da57ac92f3cc2f74d89575f2626d5968f84ca211f55410c',\n    objectSha256:\n      'f6d7eb01dbb38707bb39d760619d05de01ae456a95060cb4849eafc3c358d12c',\n  },\n  {\n    version: '2.0.0 python',\n    protoSha256:\n      'b24a5c41468610914da57ac92f3cc2f74d89575f2626d5968f84ca211f55410c',\n    objectSha256:\n      'f6d7eb01dbb38707bb39d760619d05de01ae456a95060cb4849eafc3c358d12c',\n  },\n  {\n    version: '2.0.0 python (null)',\n    protoSha256:\n      'b24a5c41468610914da57ac92f3cc2f74d89575f2626d5968f84ca211f55410c',\n    objectSha256:\n      'f6d7eb01dbb38707bb39d760619d05de01ae456a95060cb4849eafc3c358d12c',\n  },\n  {\n    version: '2.0.1 python',\n    protoSha256:\n      'b24a5c41468610914da57ac92f3cc2f74d89575f2626d5968f84ca211f55410c',\n    objectSha256:\n      '693b179b68016896c80d1b3660354549706d70e24d97240ce0aa7e9416c2b4aa',\n  },\n  {\n    version: '2.0.1 python (null)',\n    protoSha256:\n      'b24a5c41468610914da57ac92f3cc2f74d89575f2626d5968f84ca211f55410c',\n    objectSha256:\n      '693b179b68016896c80d1b3660354549706d70e24d97240ce0aa7e9416c2b4aa',\n  },\n  {\n    version: '2.0.7 python',\n    protoSha256:\n      '0d70a3372c4668a1bf4fd42983ae01f2e0fb54b4030b808bbea78e5adadb23f0',\n    objectSha256:\n      '31aecf09345df75e08f2bb406df3f06dc6e438ab85989ed213884f040ca8c8d9',\n  },\n  // development .proto\n  {\n    version: '0+unknown python',\n    protoSha256:\n      '9d035851c76143621960c858d064489838f6eef664930257946a4b23d70bcc6c',\n    objectSha256:\n      '7e062340104109d2206017bbdb5cddf45386f77d8dd169d08fa9624b5c6b2934',\n  },\n  {\n    version: '0.2.0 python (null)',\n    protoSha256:\n      'ab168a46875c6dc41000080804c858b9039aae977dfd5503d9eb234ece4e3510',\n    objectSha256:\n      '0ead495c340fd331b28e325166ffe162a0f7cc3929b559f47d3691aeb0541bae',\n  },\n  {\n    version: '2.0.6 python',\n    protoSha256:\n      '0d70a3372c4668a1bf4fd42983ae01f2e0fb54b4030b808bbea78e5adadb23f0',\n    objectSha256:\n      '2899c2d79b287e75b9ecc3aaa2fd63ec3ebd5455b7e0883528ef5425121c6a27',\n  },\n  {\n    version: '2.0.7 python (null)',\n    protoSha256:\n      '0d70a3372c4668a1bf4fd42983ae01f2e0fb54b4030b808bbea78e5adadb23f0',\n    objectSha256:\n      '7fe0b06018c4b455dcf45ee573d6307d470814d7fc469e735144959a034f1bce',\n  },\n  {\n    version: '2.1.2 python (null)',\n    protoSha256:\n      '0d70a3372c4668a1bf4fd42983ae01f2e0fb54b4030b808bbea78e5adadb23f0',\n    objectSha256:\n      '31aecf09345df75e08f2bb406df3f06dc6e438ab85989ed213884f040ca8c8d9',\n  },\n  {\n    version: '2.1.2 python',\n    protoSha256:\n      '0d70a3372c4668a1bf4fd42983ae01f2e0fb54b4030b808bbea78e5adadb23f0',\n    objectSha256:\n      '31aecf09345df75e08f2bb406df3f06dc6e438ab85989ed213884f040ca8c8d9',\n  },\n  // testnet public release\n  {\n    version: '0.2.0 python',\n    protoSha256:\n      'ab168a46875c6dc41000080804c858b9039aae977dfd5503d9eb234ece4e3510',\n    objectSha256:\n      '90c1889997dc7ab0cde21beb3fb558f91bde0a8587981d78fa9ec39a79f58f9d',\n  },\n]\n\n// function to get shasum of qrl node version\ngetQrlProtoShasum = (nodeVersion, callback) => {\n  let itemsProcessed = 0\n  QRLPROTO_SHA256.forEach((qrlnode, index, array) => {\n    itemsProcessed += 1\n    // Only look at health of userNetwork\n    if (qrlnode.version === nodeVersion) {\n      //eslint-disable-line\n      callback(qrlnode)\n    }\n    // If we got to the end, and didn't callback above, the version was not found.\n    // Return null\n    if (itemsProcessed === array.length) {\n      callback(null)\n    }\n  })\n}\n\n// Function to cleanly represent large decimal numbers without exponentional formatting.\nnumberToString = (num) => {\n  const math = require('mathjs') //eslint-disable-line\n  return math.format(num, {\n    notation: 'fixed',\n    lowerExp: 1e-100,\n    upperExp: Infinity,\n  }) //eslint-disable-line\n}\n\n// Convert decimal value to binary\ndecimalToBinary = (decimalNumber) => {\n  const binaryArray = []\n  while (decimalNumber >= 1) {\n    binaryArray.unshift(decimalNumber % 2)\n    decimalNumber = Math.floor(decimalNumber / 2) //eslint-disable-line\n  }\n  // Pad start of array with 0s if not a full byte\n  while (binaryArray.length < 8) {\n    binaryArray.unshift(0)\n  }\n  return binaryArray\n}\n","// Defines Default QRL Node Details\n// Additional user defined node can be stored in session.\n// All functions and variables are here are not defined by 'let' or 'const'\n// so that they can be utilised in other files within Meteor.\n\n/* global LocalStore */\n\n// Define the default networks available in the UI.\n// eslint-disable-next-line no-unused-vars, no-undef\nDEFAULT_NETWORKS = [{\n  id: 'mainnet',\n  name: 'Mainnet',\n  disabled: '',\n  explorerUrl: 'https://xmsscan.com',\n  type: 'both',\n  healthy: false,\n  nodes: [{\n    id: 'mainnet-1',\n    grpc: 'mainnet-1.automated.theqrl.org:19009',\n    state: false,\n    height: 0,\n  },\n  {\n    id: 'mainnet-3',\n    grpc: 'mainnet-3.automated.theqrl.org:19009',\n    state: false,\n    height: 0,\n  },\n  ],\n},\n{\n  id: 'testnet',\n  name: 'Testnet',\n  disabled: '',\n  explorerUrl: 'https://testnet-xmsscan.com',\n  type: 'both',\n  healthy: false,\n  nodes: [{\n    id: 'testnet-1',\n    grpc: 'testnet-1.automated.theqrl.org:19009',\n    state: false,\n    height: 0,\n  },\n  {\n    id: 'testnet-2',\n    grpc: 'testnet-2.automated.theqrl.org:19009',\n    state: false,\n    height: 0,\n  },\n  {\n    id: 'testnet-4',\n    grpc: 'testnet-4.automated.theqrl.org:19009',\n    state: false,\n    height: 0,\n  },\n  ],\n},\n{\n  id: 'localhost',\n  name: 'Localhost (Desktop App Only)',\n  disabled: '',\n  explorerUrl: 'http://xmsscan.com',\n  type: 'desktop',\n  healthy: false,\n  nodes: [{\n    id: 'localhost',\n    grpc: 'localhost:19009',\n    state: false,\n    height: 0,\n  }],\n},\n]\n\n// disable during network upgrade\n// Override DEFAULT_NETWORKS if provided in settings file\ntry {\n  if (Meteor.settings.public.defaultNetworks.length > 0) {\n    // Reset DEFAULT_NETWORKS\n    // eslint-disable-next-line no-unused-vars, no-undef\n    DEFAULT_NETWORKS = []\n    // Set DEFAULT_NETWORKS from Meteor settings\n    // eslint-disable-next-line no-unused-vars, no-undef\n    DEFAULT_NETWORKS = Meteor.settings.public.defaultNetworks\n  }\n} catch (e) {\n  // no configuration file used\n}\n\n// Function to search through the DEFAULT_NETWORKS array and identify and return an\n// object based on its 'id' value.\n// eslint-disable-next-line no-unused-vars, no-undef\nfindNetworkData = (array, key) => {\n  if ((LocalStore.get('nodeId') === 'custom') && (LocalStore.get('nodeStatus') !== 'connecting')) {\n    const nodeData = {\n      id: 'custom',\n      name: LocalStore.get('customNodeName'),\n      disabled: '',\n      explorerUrl: LocalStore.get('customNodeExplorerUrl'),\n      type: 'both',\n      nodes: [{\n        id: 'custom',\n        grpc: LocalStore.get('customNodeGrpc'),\n        state: false,\n        height: 0,\n      }],\n    }\n    return nodeData\n  }\n  const objFound = _.find(array, (obj) => {\n    if (obj.id === key) {\n      return obj\n    }\n    return null\n  })\n  if (objFound) {\n    return objFound\n  }\n  return null\n}\n","/* eslint no-console:0, max-len: 0 */\n/* global _, decimalToBinary, DEFAULT_NETWORKS, SHOR_PER_QUANTA, WALLET_VERSION, */\n\nimport { Meteor } from 'meteor/meteor'\nimport { check } from 'meteor/check'\nimport { BrowserPolicy } from 'meteor/browser-policy-common'\nimport helpers from '@theqrl/explorer-helpers'\nimport grpc from '@grpc/grpc-js'\nimport protoloader from '@grpc/proto-loader'\nimport tmp from 'tmp'\nimport fs from 'fs'\nimport async from 'async'\nimport CryptoJS from 'crypto-js'\nimport util from 'util'\nimport TransportNodeHid from '@ledgerhq/hw-transport-node-hid'\nimport Qrl from '@theqrl/hw-app-qrl/lib/Qrl'\nimport { QRLPROTO_SHA256 } from '@theqrl/qrl-proto-sha256'\n\nconst PROTO_PATH = Assets.absoluteFilePath('qrlbase.proto').split(\n  'qrlbase.proto'\n)[0]\n\n// Apply BrowserPolicy\nBrowserPolicy.content.disallowInlineScripts()\nBrowserPolicy.content.allowStyleOrigin('fonts.googleapis.com')\nBrowserPolicy.content.allowFontOrigin('cdn.jsdelivr.net')\nBrowserPolicy.content.allowStyleOrigin('cdn.jsdelivr.net')\nBrowserPolicy.content.allowFontOrigin('fonts.gstatic.com')\nBrowserPolicy.content.allowFontOrigin('fonts.cdnfonts.com')\nBrowserPolicy.content.allowStyleOrigin('fonts.cdnfonts.com')\nBrowserPolicy.content.allowFontDataUrl()\nBrowserPolicy.content.allowDataUrlForAll()\n\n// An array of grpc connections and associated proto file paths\nconst qrlClient = []\n\nfunction toBuffer(ab) {\n  const buffer = Buffer.from(ab)\n  return buffer\n}\n\nconst errorCallback = (error, message, alert) => {\n  const d = new Date()\n  const getTime = d.toUTCString()\n  console.log(`${alert} [Timestamp: ${getTime}] ${error}`)\n  const meteorError = new Meteor.Error(\n    500,\n    `[${getTime}] ${message} (${error})`\n  )\n  return meteorError\n}\n\n// Load the qrl.proto gRPC client into qrlClient from a remote node.\nconst loadGrpcClient = (endpoint, callback) => {\n  const options = {\n    keepCase: true,\n    longs: String,\n    enums: String,\n    defaults: true,\n    oneofs: true,\n    includeDirs: [PROTO_PATH],\n  }\n  try {\n    // Load qrlbase.proto and fetch current qrl.proto from node\n    protoloader\n      .load(`${PROTO_PATH}qrlbase.proto`)\n      .then((packageDefinitionBase) => {\n        const baseGrpcObject = grpc.loadPackageDefinition(packageDefinitionBase)\n        const client = new baseGrpcObject.qrl.Base(\n          endpoint,\n          grpc.credentials.createInsecure()\n        )\n        client.getNodeInfo({}, (err, res) => {\n          if (err) {\n            console.log(`Error fetching qrl.proto from ${endpoint}`)\n            callback(err, null)\n          } else {\n            // Write a new temp file for this grpc connection\n            const qrlProtoFilePath = tmp.fileSync({\n              mode: '0644',\n              prefix: 'qrl-',\n              postfix: '.proto',\n            }).name\n            fs.writeFile(qrlProtoFilePath, res.grpcProto, (fsErr) => {\n              if (fsErr) {\n                console.log(fsErr)\n                throw fsErr\n              }\n              let { allowUnchecksummedNodes } = Meteor.settings\n              if (allowUnchecksummedNodes !== true) {\n                allowUnchecksummedNodes = false\n              }\n              // Now read the saved qrl.proto file so we can calculate a hash from it\n              fs.readFile(qrlProtoFilePath, (errR, contents) => {\n                if (fsErr) {\n                  console.log(fsErr)\n                  throw fsErr\n                }\n\n                // Calculate the hash of the qrl.proto file contents\n                const protoFileWordArray = CryptoJS.lib.WordArray.create(\n                  contents\n                )\n                const calculatedProtoHash = CryptoJS.SHA256(\n                  protoFileWordArray\n                ).toString(CryptoJS.enc.Hex)\n                // If the calculated qrl.proto hash matches the verified one for this version,\n                // continue to verify the grpc object loaded from the proto also matches the correct\n                // shasum.\n                console.log(\n                  'proto: checking that calc of '\n                    + calculatedProtoHash\n                    + ' is valid'\n                )\n                let verified = false\n                QRLPROTO_SHA256.forEach((value) => {\n                  if (value.protoSha256) {\n                    if (value.protoSha256 === calculatedProtoHash) {\n                      verified = true\n                    }\n                  }\n                  if (value.walletProto) {\n                    if (value.walletProto === calculatedProtoHash) {\n                      verified = true\n                    }\n                  }\n                })\n                if (\n                  verified === true\n                  || allowUnchecksummedNodes === true\n                ) {\n                  protoloader\n                    .load(qrlProtoFilePath, options)\n                    .then((packageDefinition) => {\n                      const grpcObject = grpc.loadPackageDefinition(\n                        packageDefinition\n                      )\n\n                      // Inspect the object and convert to string.\n                      const grpcObjectString = JSON.stringify(\n                        util.inspect(grpcObject, {\n                          showHidden: true,\n                          depth: 4,\n                        })\n                      )\n\n                      // Calculate the hash of the grpc object string returned\n                      const protoObjectWordArray = CryptoJS.lib.WordArray.create(\n                        grpcObjectString\n                      )\n                      const calculatedObjectHash = CryptoJS.SHA256(\n                        protoObjectWordArray\n                      ).toString(CryptoJS.enc.Hex)\n\n                      // If the grpc object shasum matches, establish the grpc connection.\n                      console.log(\n                        'object: checking that calc of '\n                          + calculatedObjectHash\n                          + ' is valid'\n                      )\n                      let verifiedObject = false\n                      QRLPROTO_SHA256.forEach((value) => {\n                        if (value.objectSha256) {\n                          if (value.objectSha256 === calculatedObjectHash) {\n                            verifiedObject = true\n                          }\n                        }\n                        if (value.walletProto) {\n                          if (value.walletProto === calculatedObjectHash) {\n                            verifiedObject = true\n                          }\n                        }\n                      })\n                      if (verifiedObject === true || allowUnchecksummedNodes === true) {\n                        // Create the gRPC Connection\n                        console.log('Making GRPC PublicAPI connection to ' + endpoint)\n                        qrlClient[endpoint] = new grpcObject.qrl.PublicAPI(\n                          endpoint,\n                          grpc.credentials.createInsecure()\n                        )\n\n                        console.log(`qrlClient loaded for ${endpoint}`)\n\n                        callback(null, true)\n                      } else {\n                        // grpc object shasum does not match verified known shasum\n                        // Could be local side attack changing the proto file in between validation\n                        // and grpc connection establishment\n                        console.log(\n                          `Invalid qrl.proto grpc object shasum - node version: ${res.version}, qrl.proto object sha256: ${calculatedObjectHash}`\n                        )\n                        const myError = errorCallback(\n                          err,\n                          `Invalid qrl.proto grpc object shasum - node version: ${res.version}, qrl.proto object sha256: ${calculatedObjectHash}`,\n                          '**ERROR/connect**'\n                        )\n                        callback(myError, null)\n                      }\n                    })\n                } else {\n                  // qrl.proto file shasum does not match verified known shasum\n                  // Could be node acting in bad faith.\n                  console.log(\n                    `Invalid qrl.proto shasum - node version: ${res.version}, qrl.proto sha256: ${calculatedProtoHash}`\n                  )\n                  const myError = errorCallback(\n                    err,\n                    `Invalid qrl.proto shasum - node version: ${res.version}, qrl.proto sha256: ${calculatedProtoHash}`,\n                    '**ERROR/connect**'\n                  )\n                  callback(myError, null)\n                }\n              })\n            })\n          }\n        })\n      })\n  } catch (err) {\n    console.log('node connection error exception')\n    const myError = errorCallback(\n      err,\n      `Cannot access node: ${endpoint}`,\n      '**ERROR/connect**'\n    )\n    callback(myError, null)\n  }\n}\n\n// Establish a connection with a remote node.\n// If there is no active server side connection for the requested node,\n// this function will call loadGrpcClient to establish one.\nconst connectToNode = (endpoint, callback) => {\n  // First check if there is an existing object to store the gRPC connection\n  if (qrlClient.hasOwnProperty(endpoint) === true) { // eslint-disable-line\n    // eslint-disable-line\n    console.log(\n      'Existing connection found for ',\n      endpoint,\n      ' - attempting getNodeState'\n    )\n    // There is already a gRPC object for this server stored.\n    // Attempt to connect to it.\n    try {\n      qrlClient[endpoint].getNodeState({}, (err, response) => {\n        if (err) {\n          console.log('Error fetching node state for ', endpoint)\n          // If it errors, we're going to remove the object and attempt to connect again.\n          delete qrlClient[endpoint]\n\n          console.log('Attempting re-connection to ', endpoint)\n\n          loadGrpcClient(endpoint, (loadErr, loadResponse) => {\n            if (loadErr) {\n              console.log(`Failed to re-connect to node ${endpoint}`)\n              const myError = errorCallback(\n                err,\n                'Cannot connect to remote node',\n                '**ERROR/connection** '\n              )\n              callback(myError, null)\n            } else {\n              console.log(`Connected to ${endpoint}`)\n              callback(null, loadResponse)\n            }\n          })\n        } else {\n          console.log(`Node state for ${endpoint} ok`)\n          callback(null, response)\n        }\n      })\n    } catch (err) {\n      console.log('node state error exception')\n      const myError = errorCallback(\n        err,\n        'Cannot access API/getNodeState',\n        '**ERROR/getNodeState**'\n      )\n      callback(myError, null)\n    }\n  } else {\n    console.log(`Establishing new connection to ${endpoint}`)\n    // We've not connected to this node before, let's establish a connection to it.\n    loadGrpcClient(endpoint, (err) => {\n      if (err) {\n        console.log(`Failed to connect to node ${endpoint}`)\n        const myError = errorCallback(\n          err,\n          'Cannot connect to remote node',\n          '**ERROR/connection** '\n        )\n        callback(myError, null)\n      } else {\n        console.log(`Connected to ${endpoint}`)\n        qrlClient[endpoint].getNodeState({}, (errState, response) => {\n          if (errState) {\n            console.log(`Failed to query node state ${endpoint}`)\n            const myError = errorCallback(\n              err,\n              'Cannot connect to remote node',\n              '**ERROR/connection** '\n            )\n            callback(myError, null)\n          } else {\n            callback(null, response)\n          }\n        })\n      }\n    })\n  }\n}\n\nconst checkNetworkHealth = (userNetwork, callback) => {\n  try {\n    let networkHealthy = false\n\n    // Determine current active nodes\n    DEFAULT_NETWORKS.forEach((network) => {\n      // Only look at health of userNetwork\n      if (network.id === userNetwork) {\n        if (network.healthy === true) {\n          networkHealthy = true\n        }\n      }\n    })\n\n    if (networkHealthy === true) {\n      callback(null, true)\n    } else {\n      callback(true, { error: 'Network unhealthy' })\n    }\n  } catch (err) {\n    console.log('Exception in checkNetworkHealth')\n    console.log(err)\n  }\n}\n\n// Connect to all nodes\nconst connectNodes = () => {\n  // Establish gRPC connections with all enabled DEFAULT_NETWORKS\n  DEFAULT_NETWORKS.forEach((network, networkIndex) => {\n    if (network.disabled === '') {\n      console.log(\n        `Attempting to create gRPC connections to network: ${network.name} ...`\n      )\n\n      // Loop each node in the network and establish a gRPC connection.\n      const networkNodes = network.nodes\n      networkNodes.forEach((node, nodeIndex) => {\n        console.log(\n          `Attempting to create gRPC connection to network: ${network.name}, node: ${node.id} (${node.grpc}) ...`\n        )\n        const endpoint = node.grpc\n        connectToNode(endpoint, (err, res) => {\n          if (err) {\n            console.log(`Failed to connect to node ${endpoint}`)\n            DEFAULT_NETWORKS[networkIndex].nodes[nodeIndex].state = false\n            DEFAULT_NETWORKS[networkIndex].nodes[nodeIndex].height = 0\n          } else {\n            console.log(`Connected to ${endpoint}`)\n            DEFAULT_NETWORKS[networkIndex].nodes[nodeIndex].state = true\n            DEFAULT_NETWORKS[networkIndex].nodes[nodeIndex].height = parseInt(\n              res.info.block_height,\n              10\n            )\n            // At least one node in the network is online, set network as healthy\n            DEFAULT_NETWORKS[networkIndex].healthy = true\n          }\n        })\n      })\n    }\n  })\n}\n\n// Wrapper to provide highly available API results in the event\n// the primary or secondary nodes go offline\nconst qrlApi = (api, request, callback) => {\n  // Handle multi node network api requests\n  if (\n    request.network === 'devnet'\n    || request.network === 'testnet'\n    || request.network === 'mainnet'\n  ) {\n    // Store active nodes\n    const activeNodes = []\n\n    // Determine current active nodes\n    DEFAULT_NETWORKS.forEach((network) => {\n      // Only get nodes from user selected network\n      if (network.id === request.network) {\n        const networkNodes = network.nodes\n        networkNodes.forEach((node) => {\n          if (node.state === true) {\n            activeNodes.push(node)\n          }\n        })\n      }\n    })\n\n    // Determine node with highest block height and set as bestNode\n    const bestNode = {}\n    bestNode.grpc = ''\n    bestNode.height = 0\n    activeNodes.forEach((node) => {\n      if (node.height > bestNode.height) {\n        bestNode.grpc = node.grpc\n        bestNode.height = node.height\n      }\n    })\n\n    console.log('bestNode:', bestNode)\n\n    // If all nodes are offline, fail\n    if (activeNodes.length === 0) {\n      const myError = errorCallback(\n        'The wallet server cannot connect to any API node',\n        'Cannot connect to API',\n        '**ERROR/noActiveNodes/b**'\n      )\n      callback(myError, null)\n    } else {\n      // Make the API call\n      // Delete network from request object\n      delete request.network\n      console.log('Making', api, 'request to', bestNode.grpc)\n      qrlClient[bestNode.grpc][api](request, (error, response) => {\n        if (api === 'pushTransaction') {\n          response.relayed = bestNode.grpc\n        }\n        if (error) {\n          const myError = new Meteor.Error(500, error.details)\n          callback(myError, null)\n        } else {\n          callback(null, response)\n        }\n      })\n    }\n  } else {\n    // Handle custom and localhost connections\n    console.log('Handling custom API call')\n    const apiEndpoint = request.network\n    // Delete network from request object\n    delete request.network\n    console.log('Making', api, 'request to', apiEndpoint)\n\n    qrlClient[apiEndpoint][api](request, (error, response) => {\n      if (api === 'pushTransaction') {\n        response.relayed = apiEndpoint\n      }\n      if (error) {\n        const myError = new Meteor.Error(500, error.details)\n        callback(myError, null)\n      } else {\n        callback(null, response)\n      }\n    })\n  }\n}\n\n// Function to call getKnownPeers API.\nconst getKnownPeers = (request, callback) => {\n  qrlApi('getKnownPeers', request, (err, response) => {\n    if (err) {\n      callback(err, null)\n    } else {\n      callback(null, response)\n    }\n  })\n}\n\nconst getStats = (request, callback) => {\n  try {\n    qrlApi('getStats', request, (err, response) => {\n      if (err) {\n        const myError = errorCallback(\n          err,\n          'Cannot access API/GetStats',\n          '**ERROR/getStats** '\n        )\n        callback(myError, null)\n      } else {\n        callback(null, response)\n      }\n    })\n  } catch (err) {\n    const myError = errorCallback(\n      err,\n      'Cannot access API/GetStats',\n      '**ERROR/GetStats**'\n    )\n    callback(myError, null)\n  }\n}\n\nconst getObject = (request, callback) => {\n  try {\n    qrlApi('GetObject', request, (error, response) => {\n      if (error) {\n        const myError = errorCallback(\n          error,\n          'Cannot access API/GetObject',\n          '**ERROR/GetObject**'\n        )\n        callback(myError, null)\n      } else {\n        // console.log(response)\n        callback(null, response)\n      }\n    })\n  } catch (error) {\n    const myError = errorCallback(\n      error,\n      'Cannot access API/GetObject',\n      '**ERROR/GetObject**'\n    )\n    callback(myError, null)\n  }\n}\n\nconst helpersaddressTransactions = (response) => {\n  const output = []\n  // console.log(response)\n  _.each(response.transactions_detail, (tx) => {\n    const txEdited = tx\n    if (tx.tx.transfer) {\n      const hexlified = []\n      _.each(tx.tx.transfer.addrs_to, (txOutput) => {\n        hexlified.push(`Q${Buffer.from(txOutput).toString('hex')}`)\n      })\n      txEdited.tx.transfer.addrs_to = hexlified\n    }\n    if (tx.tx.token) {\n      console.log(tx.tx.token)\n      if (\n        Buffer.from(tx.tx.token.symbol).toString('hex').slice(0, 8) !== '00ff00ff'\n      ) {\n        txEdited.tx.token.name = Buffer.from(tx.tx.token.name).toString()\n        txEdited.tx.token.symbol = Buffer.from(tx.tx.token.symbol).toString()\n        txEdited.tx.token.owner = `Q${Buffer.from(tx.tx.token.owner).toString(\n          'hex'\n        )}`\n      } else {\n        txEdited.tx.token.name = Buffer.from(tx.tx.token.name).toString('hex')\n        txEdited.tx.token.symbol = Buffer.from(tx.tx.token.symbol).toString('hex')\n        txEdited.tx.token.owner = `Q${Buffer.from(tx.tx.token.owner).toString(\n          'hex'\n        )}`\n      }\n    }\n    if (tx.tx.transfer_token) {\n      const hexlified = []\n      txEdited.tx.transfer_token.token_txhash = Buffer.from(\n        tx.tx.transfer_token.token_txhash\n      ).toString('hex')\n      _.each(tx.tx.transfer_token.addrs_to, (txOutput) => {\n        hexlified.push(`Q${Buffer.from(txOutput).toString('hex')}`)\n      })\n      txEdited.tx.transfer_token.addrs_to = hexlified\n    }\n    if (tx.tx.coinbase) {\n      if (tx.tx.coinbase.addr_to) {\n        txEdited.tx.coinbase.addr_to = `Q${Buffer.from(\n          txEdited.tx.coinbase.addr_to\n        ).toString('hex')}`\n      }\n    }\n    if (tx.tx.transaction_hash) {\n      txEdited.tx.transaction_hash = Buffer.from(\n        txEdited.tx.transaction_hash\n      ).toString('hex')\n    }\n    if (tx.tx.master_addr) {\n      txEdited.tx.master_addr = Buffer.from(txEdited.tx.master_addr).toString(\n        'hex'\n      )\n    }\n    if (tx.tx.public_key) {\n      txEdited.tx.public_key = Buffer.from(txEdited.tx.public_key).toString(\n        'hex'\n      )\n    }\n    if (tx.tx.signature) {\n      txEdited.tx.signature = Buffer.from(txEdited.tx.signature).toString('hex')\n    }\n    if (tx.block_header_hash) {\n      txEdited.block_header_hash = Buffer.from(\n        txEdited.block_header_hash\n      ).toString('hex')\n    }\n    txEdited.addr_from = `Q${Buffer.from(txEdited.addr_from).toString('hex')}`\n    output.push(txEdited)\n  })\n  return response\n}\n\nconst getTransactionsByAddress = (request, callback) => {\n  try {\n    qrlApi('GetTransactionsByAddress', request, (error, response) => {\n      if (error) {\n        const myError = errorCallback(\n          error,\n          'Cannot access API/GetTransactionsByAddress',\n          '**ERROR/GetTransactionsByAddress**'\n        )\n        callback(myError, null)\n      } else {\n        // console.log(response)\n        callback(null, response)\n      }\n    })\n  } catch (error) {\n    const myError = errorCallback(\n      error,\n      'Cannot access API/GetTransactionsByAddress',\n      '**ERROR/GetTransactionsByAddress**'\n    )\n    callback(myError, null)\n  }\n}\n\nconst getTokensByAddress = (request, callback) => {\n  try {\n    qrlApi('GetTokensByAddress', request, (error, response) => {\n      if (error) {\n        const myError = errorCallback(\n          error,\n          'Cannot access API/GetTokensByAddress',\n          '**ERROR/GetTokensByAddress**'\n        )\n        callback(myError, null)\n      } else {\n        // console.log(response)\n        callback(null, response)\n      }\n    })\n  } catch (error) {\n    const myError = errorCallback(\n      error,\n      'Cannot access API/GetTokensByAddress',\n      '**ERROR/GetTokensByAddress**'\n    )\n    callback(myError, null)\n  }\n}\n\nconst getMultiSigAddressesByAddress = (request, callback) => {\n  try {\n    qrlApi('GetMultiSigAddressesByAddress', request, (error, response) => {\n      if (error) {\n        const myError = errorCallback(\n          error,\n          'Cannot access API/GetMultiSigAddressesByAddress',\n          '**ERROR/GetMultiSigAddressesByAddress**'\n        )\n        callback(myError, null)\n      } else {\n        callback(null, response)\n      }\n    })\n  } catch (error) {\n    const myError = errorCallback(\n      error,\n      'Cannot access API/GetMultiSigAddressesByAddress',\n      '**ERROR/GetMultiSigAddressesByAddress**'\n    )\n    callback(myError, null)\n  }\n}\n\nconst getMultiSigSpendTxsByAddress = (request, callback) => {\n  try {\n    qrlApi('GetMultiSigSpendTxsByAddress', request, (error, response) => {\n      if (error) {\n        const myError = errorCallback(\n          error,\n          'Cannot access API/GetMultiSigSpendTxsByAddress',\n          '**ERROR/GetMultiSigSpendTxsByAddress**'\n        )\n        callback(myError, null)\n      } else {\n        callback(null, response)\n      }\n    })\n  } catch (error) {\n    const myError = errorCallback(\n      error,\n      'Cannot access API/GetMultiSigSpendTxsByAddress',\n      '**ERROR/GetMultiSigSpendTxsByAddress**'\n    )\n    callback(myError, null)\n  }\n}\n\nconst getOTS = (request, callback) => {\n  try {\n    qrlApi('GetOTS', request, (error, response) => {\n      if (error) {\n        const myError = errorCallback(\n          error,\n          'Cannot access API/GetOTS',\n          '**ERROR/getOTS** '\n        )\n        callback(myError, null)\n      } else {\n        callback(null, response)\n      }\n    })\n  } catch (error) {\n    const myError = errorCallback(\n      error,\n      'Cannot access API/GetOTS',\n      '**ERROR/GetOTS**'\n    )\n    callback(myError, null)\n  }\n}\n\nconst getFullAddressState = (request, callback) => {\n  try {\n    qrlApi('GetAddressState', request, (error, response) => {\n      if (error) {\n        const myError = errorCallback(\n          error,\n          'Cannot access API/GetOptimizedAddressState',\n          '**ERROR/getAddressState** '\n        )\n        callback(myError, null)\n      } else {\n        if (response.state.address) {\n          response.state.address = `Q${Buffer.from(\n            response.state.address\n          ).toString('hex')}`\n        }\n\n        callback(null, response)\n      }\n    })\n  } catch (error) {\n    const myError = errorCallback(\n      error,\n      'Cannot access API/GetAddressState',\n      '**ERROR/GetAddressState**'\n    )\n    callback(myError, null)\n  }\n}\n\n// Function to call getAddressState API\nconst getAddressState = (request, callback) => {\n  try {\n    qrlApi('GetOptimizedAddressState', request, (error, response) => {\n      if (error) {\n        const myError = errorCallback(\n          error,\n          'Cannot access API/GetOptimizedAddressState',\n          '**ERROR/getAddressState** '\n        )\n        callback(myError, null)\n      } else {\n        // Parse OTS Bitfield, and grab the lowest unused key\n        const newOtsBitfield = {}\n        let lowestUnusedOtsKey = -1\n        let otsBitfieldLength = 0\n        let thisOtsBitfield = []\n        if (response.state.ots_bitfield !== undefined) {\n          thisOtsBitfield = response.state.ots_bitfield\n        }\n        thisOtsBitfield.forEach((item, index) => {\n          const thisDecimal = new Uint8Array(item)[0]\n          const thisBinary = decimalToBinary(thisDecimal).reverse()\n          const startIndex = index * 8\n\n          for (let i = 0; i < 8; i += 1) {\n            const thisOtsIndex = startIndex + i\n\n            // Add to parsed array\n            newOtsBitfield[thisOtsIndex] = thisBinary[i]\n\n            // Check if this is lowest unused key\n            if (\n              thisBinary[i] === 0\n              && (thisOtsIndex < lowestUnusedOtsKey || lowestUnusedOtsKey === -1)\n            ) {\n              lowestUnusedOtsKey = thisOtsIndex\n            }\n\n            // Increment otsBitfieldLength\n            otsBitfieldLength += 1\n          }\n        })\n\n        // If all keys in bitfield are used, lowest key will be what is shown in ots_counter + 1\n        if (lowestUnusedOtsKey === -1) {\n          if (response.state.ots_counter === '0') {\n            lowestUnusedOtsKey = otsBitfieldLength\n          } else {\n            lowestUnusedOtsKey = parseInt(response.state.ots_counter, 10) + 1\n          }\n        }\n\n        // Calculate number of keys that are consumed\n        let totalKeysConsumed = 0\n        // First add all tracked keys from bitfield\n        for (let i = 0; i < otsBitfieldLength; i += 1) {\n          if (newOtsBitfield[i] === 1) {\n            totalKeysConsumed += 1\n          }\n        }\n\n        // Then add any extra from `otsBitfieldLength` to `ots_counter`\n        if (response.state.ots_counter !== '0') {\n          totalKeysConsumed\n            += parseInt(response.state.ots_counter, 10) - (otsBitfieldLength - 1)\n        }\n\n        // Add in OTS fields to response\n        response.ots = {}\n        response.ots.keys = newOtsBitfield\n        response.ots.nextKey = lowestUnusedOtsKey\n        response.ots.keysConsumed = totalKeysConsumed\n\n        if (response.state.address) {\n          response.state.address = `Q${Buffer.from(\n            response.state.address\n          ).toString('hex')}`\n        }\n        console.table(response)\n        callback(null, response)\n      }\n    })\n  } catch (error) {\n    const myError = errorCallback(\n      error,\n      'Cannot access API/GetAddressState',\n      '**ERROR/GetAddressState**'\n    )\n    callback(myError, null)\n  }\n}\n\nconst getMultiSigAddressState = (request, callback) => {\n  try {\n    qrlApi('GetMultiSigAddressState', request, (error, response) => {\n      if (error) {\n        const myError = errorCallback(\n          error,\n          'Cannot access API/GetMultiSigAddressState',\n          '**ERROR/getMultiSigAddressState** '\n        )\n        callback(myError, null)\n      } else {\n        callback(null, response)\n      }\n    })\n  } catch (error) {\n    const myError = errorCallback(\n      error,\n      'Cannot access API/GetMultiSigAddressState',\n      '**ERROR/GetMultiSigAddressState**'\n    )\n    callback(myError, null)\n  }\n}\n\n// Function to call getObject API and extract a txn Hash..\nconst getTxnHash = (request, callback) => {\n  const txnHash = Buffer.from(request.query, 'hex')\n\n  try {\n    qrlApi(\n      'getObject',\n      { query: txnHash, network: request.network },\n      (err, response) => {\n        if (err) {\n          console.log(`Error: ${err.message}`)\n          callback(err, null)\n        } else {\n          callback(null, response)\n        }\n      }\n    )\n  } catch (err) {\n    callback(`Caught Error: ${err}`, null)\n  }\n}\n\n// Function to call transferCoins API\nconst transferCoins = (request, callback) => {\n  const tx = {\n    // master_addr: request.fromAddress,\n    addresses_to: request.addresses_to,\n    amounts: request.amounts,\n    fee: request.fee,\n    xmss_pk: request.xmssPk,\n    network: request.network,\n    message_data: request.message_data,\n  }\n\n  qrlApi('transferCoins', tx, (err, response) => {\n    if (err) {\n      console.log(`Error:  ${err.message}`)\n      callback(err, null)\n    } else {\n      const transferResponse = {\n        response,\n      }\n      callback(null, transferResponse)\n    }\n  })\n}\n\nconst createMultiSig = (request, callback) => {\n  const tx = {\n    master_addr: request.fromAddress,\n    signatories: request.signatories,\n    weights: request.weights,\n    threshold: request.threshold,\n    fee: request.fee,\n    xmss_pk: request.xmssPk,\n    network: request.network,\n  }\n\n  qrlApi('GetMultiSigCreateTxn', tx, (err, response) => {\n    if (err) {\n      console.log(`Error:  ${err.message}`)\n      callback(err, null)\n    } else {\n      const transferResponse = {\n        response,\n      }\n      callback(null, transferResponse)\n    }\n  })\n}\n\nconst spendMultiSig = (request, callback) => {\n  const tx = {\n    // master_addr: request.master_addr,\n    multi_sig_address: request.multi_sig_address,\n    addrs_to: request.addrs_to,\n    amounts: request.amounts,\n    expiry_block_number: request.expiry_block_number,\n    fee: request.fee,\n    xmss_pk: request.xmssPk,\n    network: request.network,\n  }\n  console.log('About to call GRPC GetMultiSigSpendTxn with tx = ')\n  console.log(tx)\n  qrlApi('GetMultiSigSpendTxn', tx, (err, response) => {\n    if (err) {\n      console.log(`Error:  ${err.message}`)\n      callback(err, null)\n    } else {\n      const transferResponse = {\n        response,\n      }\n      callback(null, transferResponse)\n    }\n  })\n}\n\nconst voteMultiSig = (request, callback) => {\n  const tx = {\n    // master_addr: request.master_addr,\n    shared_key: request.shared_key,\n    unvote: request.unvote,\n    fee: request.fee,\n    xmss_pk: request.xmssPk,\n    network: request.network,\n  }\n  console.log('About to call GRPC GetMultiSigVoteTxn with tx = ')\n  console.log(tx)\n  qrlApi('GetMultiSigVoteTxn', tx, (err, response) => {\n    if (err) {\n      console.log(`Error:  ${err.message}`)\n      callback(err, null)\n    } else {\n      const transferResponse = {\n        response,\n      }\n      callback(null, transferResponse)\n    }\n  })\n}\n\nconst getHeight = (request, callback) => {\n  const tx = {\n    network: request.network,\n  }\n\n  qrlApi('GetHeight', tx, (err, response) => {\n    console.log('response:', response)\n    if (err) {\n      console.log(`Error:  ${err.message}`)\n      callback(err, null)\n    } else {\n      callback(null, response)\n    }\n  })\n}\n\nconst confirmTransaction = (request, callback) => {\n  const confirmTxn = {\n    transaction_signed: request.extended_transaction_unsigned.tx,\n  }\n  const relayedThrough = []\n\n  // change Uint8Arrays to Buffers\n  confirmTxn.transaction_signed.public_key = toBuffer(\n    confirmTxn.transaction_signed.public_key\n  )\n  confirmTxn.transaction_signed.signature = toBuffer(\n    confirmTxn.transaction_signed.signature\n  )\n\n  const addrsTo = confirmTxn.transaction_signed.transfer.addrs_to\n\n  const addrsToFormatted = []\n  addrsTo.forEach((item) => {\n    const bufItem = toBuffer(item)\n    addrsToFormatted.push(bufItem)\n  })\n\n  // Overwrite addrs_to with our updated one\n  confirmTxn.transaction_signed.transfer.addrs_to = addrsToFormatted\n  confirmTxn.network = request.network\n\n  // Relay transaction through user node, then all default nodes.\n  let txnResponse\n\n  async.waterfall(\n    [\n      // Relay through user node.\n      function (wfcb) {\n        try {\n          qrlApi('pushTransaction', confirmTxn, (err, res) => {\n            console.log(\n              'Relayed Txn: ',\n              Buffer.from(res.tx_hash).toString('hex')\n            )\n\n            if (err) {\n              console.log(`Error:  ${err.message}`)\n              txnResponse = { error: err.message, response: err.message }\n              wfcb()\n            } else {\n              const hashResponse = {\n                txnHash: Buffer.from(\n                  confirmTxn.transaction_signed.transaction_hash\n                ).toString('hex'),\n                signature: Buffer.from(\n                  confirmTxn.transaction_signed.signature\n                ).toString('hex'),\n              }\n              txnResponse = { error: null, response: hashResponse }\n              relayedThrough.push(res.relayed)\n              console.log(`Transaction sent via ${res.relayed}`)\n              wfcb()\n            }\n          })\n        } catch (err) {\n          console.log(`Error: Failed to send transaction - ${err}`)\n          txnResponse = { error: err, response: err }\n          wfcb()\n        }\n      },\n      /*\n    // Now relay through all default nodes that we have a connection too\n    function(wfcb) {\n      async.eachSeries(DEFAULT_NODES, (node, cb) => {\n        if ((qrlClient.hasOwnProperty(node.grpc) === true) && (node.grpc !== request.grpc)) {\n          try {\n            // Push the transaction - we don't care for its response\n            qrlClient[node.grpc].pushTransaction(confirmTxn, (err) => {\n              if (err) {\n                console.log(`Error: Failed to send transaction through ${node.grpc} - ${err}`)\n                cb()\n              } else {\n                console.log(`Transfer Transaction sent via ${node.grpc}`)\n                relayedThrough.push(node.grpc)\n                cb()\n              }\n            })\n          } catch(err) {\n            console.log(`Error: Failed to send transaction through ${node.grpc} - ${err}`)\n            cb()\n          }\n        } else {\n          cb()\n        }\n      }, (err) => {\n        if (err) console.error(err.message)\n        console.log('All transfer txns sent')\n        wfcb()\n      })\n    },\n    */\n    ],\n    () => {\n      // All done, send txn response\n      txnResponse.relayed = relayedThrough\n      callback(null, txnResponse)\n    }\n  )\n}\n\nconst confirmMultiSigCreate = (request, callback) => {\n  const confirmTxn = {\n    transaction_signed: request.extended_transaction_unsigned.tx,\n  }\n  const relayedThrough = []\n\n  // change Uint8Arrays to Buffers\n  confirmTxn.transaction_signed.public_key = toBuffer(\n    confirmTxn.transaction_signed.public_key\n  )\n  confirmTxn.transaction_signed.signature = toBuffer(\n    confirmTxn.transaction_signed.signature\n  )\n\n  const { signatories } = confirmTxn.transaction_signed.multi_sig_create\n  const signatoriesFormatted = []\n  signatories.forEach(function (item) {\n    const i = toBuffer(item)\n    signatoriesFormatted.push(i)\n  })\n\n  // Overwrite signatories with our updated one\n  confirmTxn.transaction_signed.multi_sig_create.signatories = signatoriesFormatted\n  // // tx.multi_sig_create.threshold\n  confirmTxn.network = request.network\n\n  console.log('confirmed + signed tx for push', confirmTxn)\n  console.log(confirmTxn.transaction_signed.multi_sig_create.signatories)\n\n  // Relay transaction through user node, then all default nodes.\n  let txnResponse\n\n  async.waterfall(\n    [\n      // Relay through user node.\n      function (wfcb) {\n        try {\n          qrlApi('pushTransaction', confirmTxn, (err, res) => {\n            console.log(\n              'Relayed Txn: ',\n              Buffer.from(res.tx_hash).toString('hex')\n            )\n\n            if (err) {\n              console.log(`Error:  ${err.message}`)\n              txnResponse = { error: err.message, response: err.message }\n              wfcb()\n            } else {\n              const hashResponse = {\n                txnHash: Buffer.from(\n                  confirmTxn.transaction_signed.transaction_hash\n                ).toString('hex'),\n                signature: Buffer.from(\n                  confirmTxn.transaction_signed.signature\n                ).toString('hex'),\n              }\n              txnResponse = { error: null, response: hashResponse }\n              relayedThrough.push(res.relayed)\n              console.log(`Transaction sent via ${res.relayed}`)\n              wfcb()\n            }\n          })\n        } catch (err) {\n          console.log(`Error: Failed to send transaction: ${err}`)\n          txnResponse = { error: err, response: err }\n          wfcb()\n        }\n      },\n      /*\n    // Now relay through all default nodes that we have a connection too\n    function(wfcb) {\n      async.eachSeries(DEFAULT_NODES, (node, cb) => {\n        if ((qrlClient.hasOwnProperty(node.grpc) === true) && (node.grpc !== request.grpc)) {\n          try {\n            // Push the transaction - we don't care for its response\n            qrlClient[node.grpc].pushTransaction(confirmTxn, (err) => {\n              if (err) {\n                console.log(`Error: Failed to send transaction through ${node.grpc} - ${err}`)\n                cb()\n              } else {\n                console.log(`Transfer Transaction sent via ${node.grpc}`)\n                relayedThrough.push(node.grpc)\n                cb()\n              }\n            })\n          } catch(err) {\n            console.log(`Error: Failed to send transaction through ${node.grpc} - ${err}`)\n            cb()\n          }\n        } else {\n          cb()\n        }\n      }, (err) => {\n        if (err) console.error(err.message)\n        console.log('All transfer txns sent')\n        wfcb()\n      })\n    },\n    */\n    ],\n    () => {\n      // All done, send txn response\n      txnResponse.relayed = relayedThrough\n      callback(null, txnResponse)\n    }\n  )\n}\n\nconst confirmMultiSigSpend = (request, callback) => {\n  const confirmTxn = {\n    transaction_signed: request.extended_transaction_unsigned.tx,\n  }\n  const relayedThrough = []\n\n  // change Uint8Arrays to Buffers\n  confirmTxn.transaction_signed.public_key = toBuffer(\n    confirmTxn.transaction_signed.public_key\n  )\n  confirmTxn.transaction_signed.signature = toBuffer(\n    confirmTxn.transaction_signed.signature\n  )\n\n  const addrsTo = confirmTxn.transaction_signed.multi_sig_spend.addrs_to\n  const signatoriesFormatted = []\n  addrsTo.forEach((item) => {\n    const i = toBuffer(item)\n    signatoriesFormatted.push(i)\n  })\n\n  // Overwrite signatories with our updated one\n  confirmTxn.transaction_signed.multi_sig_spend.addrs_to = signatoriesFormatted\n\n  // multi_sig_address & master_addr as Buffer\n  // confirmTxn.transaction_signed.master_addr = toBuffer(confirmTxn.transaction_signed.master_addr)\n  confirmTxn.transaction_signed.multi_sig_spend.multi_sig_address = toBuffer(\n    confirmTxn.transaction_signed.multi_sig_spend.multi_sig_address\n  )\n\n  // // tx.multi_sig_create.threshold\n  confirmTxn.network = request.network\n\n  console.log('confirmed + signed tx for push', confirmTxn)\n\n  // Relay transaction through user node, then all default nodes.\n  let txnResponse\n\n  async.waterfall(\n    [\n      // Relay through user node.\n      function (wfcb) {\n        try {\n          qrlApi('pushTransaction', confirmTxn, (err, res) => {\n            console.log(\n              'Relayed Txn: ',\n              Buffer.from(res.tx_hash).toString('hex')\n            )\n\n            if (err) {\n              console.log(`Error:  ${err.message}`)\n              txnResponse = { error: err.message, response: err.message }\n              wfcb()\n            } else {\n              const hashResponse = {\n                txnHash: Buffer.from(\n                  confirmTxn.transaction_signed.transaction_hash\n                ).toString('hex'),\n                signature: Buffer.from(\n                  confirmTxn.transaction_signed.signature\n                ).toString('hex'),\n              }\n              txnResponse = { error: null, response: hashResponse }\n              relayedThrough.push(res.relayed)\n              console.log(`Transaction sent via ${res.relayed}`)\n              wfcb()\n            }\n          })\n        } catch (err) {\n          console.log(`Error: Failed to send transaction: ${err}`)\n          txnResponse = { error: err, response: err }\n          wfcb()\n        }\n      },\n      /*\n    // Now relay through all default nodes that we have a connection too\n    function(wfcb) {\n      async.eachSeries(DEFAULT_NODES, (node, cb) => {\n        if ((qrlClient.hasOwnProperty(node.grpc) === true) && (node.grpc !== request.grpc)) {\n          try {\n            // Push the transaction - we don't care for its response\n            qrlClient[node.grpc].pushTransaction(confirmTxn, (err) => {\n              if (err) {\n                console.log(`Error: Failed to send transaction through ${node.grpc} - ${err}`)\n                cb()\n              } else {\n                console.log(`Transfer Transaction sent via ${node.grpc}`)\n                relayedThrough.push(node.grpc)\n                cb()\n              }\n            })\n          } catch(err) {\n            console.log(`Error: Failed to send transaction through ${node.grpc} - ${err}`)\n            cb()\n          }\n        } else {\n          cb()\n        }\n      }, (err) => {\n        if (err) console.error(err.message)\n        console.log('All transfer txns sent')\n        wfcb()\n      })\n    },\n    */\n    ],\n    () => {\n      // All done, send txn response\n      txnResponse.relayed = relayedThrough\n      callback(null, txnResponse)\n    }\n  )\n}\n\nconst confirmMultiSigVote = (request, callback) => {\n  const confirmTxn = {\n    transaction_signed: request.extended_transaction_unsigned.tx,\n  }\n  const relayedThrough = []\n\n  // change Uint8Arrays to Buffers\n  confirmTxn.transaction_signed.public_key = toBuffer(\n    confirmTxn.transaction_signed.public_key\n  )\n  confirmTxn.transaction_signed.signature = toBuffer(\n    confirmTxn.transaction_signed.signature\n  )\n\n  // multi_sig_address & master_addr as Buffer\n  // confirmTxn.transaction_signed.master_addr = toBuffer(confirmTxn.transaction_signed.master_addr)\n  confirmTxn.transaction_signed.multi_sig_vote.shared_key = toBuffer(\n    confirmTxn.transaction_signed.multi_sig_vote.shared_key\n  )\n\n  // // tx.multi_sig_create.threshold\n  confirmTxn.network = request.network\n\n  console.log('confirmed + signed tx for push', confirmTxn)\n\n  // Relay transaction through user node, then all default nodes.\n  let txnResponse\n\n  async.waterfall(\n    [\n      // Relay through user node.\n      function (wfcb) {\n        try {\n          qrlApi('pushTransaction', confirmTxn, (err, res) => {\n            console.log(\n              'Relayed Txn: ',\n              Buffer.from(res.tx_hash).toString('hex')\n            )\n\n            if (err) {\n              console.log(`Error:  ${err.message}`)\n              txnResponse = { error: err.message, response: err.message }\n              wfcb()\n            } else {\n              const hashResponse = {\n                txnHash: Buffer.from(\n                  confirmTxn.transaction_signed.transaction_hash\n                ).toString('hex'),\n                signature: Buffer.from(\n                  confirmTxn.transaction_signed.signature\n                ).toString('hex'),\n              }\n              txnResponse = { error: null, response: hashResponse }\n              relayedThrough.push(res.relayed)\n              console.log(`Transaction sent via ${res.relayed}`)\n              wfcb()\n            }\n          })\n        } catch (err) {\n          console.log(`Error: Failed to send transaction: ${err}`)\n          txnResponse = { error: err, response: err }\n          wfcb()\n        }\n      },\n      /*\n    // Now relay through all default nodes that we have a connection too\n    function(wfcb) {\n      async.eachSeries(DEFAULT_NODES, (node, cb) => {\n        if ((qrlClient.hasOwnProperty(node.grpc) === true) && (node.grpc !== request.grpc)) {\n          try {\n            // Push the transaction - we don't care for its response\n            qrlClient[node.grpc].pushTransaction(confirmTxn, (err) => {\n              if (err) {\n                console.log(`Error: Failed to send transaction through ${node.grpc} - ${err}`)\n                cb()\n              } else {\n                console.log(`Transfer Transaction sent via ${node.grpc}`)\n                relayedThrough.push(node.grpc)\n                cb()\n              }\n            })\n          } catch(err) {\n            console.log(`Error: Failed to send transaction through ${node.grpc} - ${err}`)\n            cb()\n          }\n        } else {\n          cb()\n        }\n      }, (err) => {\n        if (err) console.error(err.message)\n        console.log('All transfer txns sent')\n        wfcb()\n      })\n    },\n    */\n    ],\n    () => {\n      // All done, send txn response\n      txnResponse.relayed = relayedThrough\n      callback(null, txnResponse)\n    }\n  )\n}\n\n// Function to call GetTokenTxn API\nconst createTokenTxn = (request, callback) => {\n  const tx = {\n    // master_addr: request.addressFrom,\n    symbol: request.symbol,\n    name: request.name,\n    owner: request.owner,\n    decimals: request.decimals,\n    initial_balances: request.initialBalances,\n    fee: request.fee,\n    xmss_pk: request.xmssPk,\n    xmss_ots_index: request.xmssOtsKey,\n    network: request.network,\n  }\n\n  qrlApi('getTokenTxn', tx, (err, response) => {\n    if (err) {\n      console.log(`Error:  ${err.message}`)\n      callback(err, null)\n    } else {\n      const transferResponse = {\n        txnHash: Buffer.from(\n          response.extended_transaction_unsigned.tx.transaction_hash\n        ).toString('hex'),\n        response,\n      }\n\n      callback(null, transferResponse)\n    }\n  })\n}\n\n// Function to call GetMessageTxn API\nconst createMessageTxn = (request, callback) => {\n  const tx = {\n    // master_addr: request.addressFrom,\n    message: request.message,\n    fee: request.fee,\n    xmss_pk: request.xmssPk,\n    xmss_ots_index: request.xmssOtsKey,\n    network: request.network,\n  }\n\n  qrlApi('getMessageTxn', tx, (err, response) => {\n    if (err) {\n      console.log(`Error:  ${err.message}`)\n      callback(err, null)\n    } else {\n      const transferResponse = {\n        txnHash: Buffer.from(\n          response.extended_transaction_unsigned.tx.transaction_hash\n        ).toString('hex'),\n        response,\n      }\n\n      callback(null, transferResponse)\n    }\n  })\n}\n\n// Create Keybase Txn\nconst createKeybaseTxn = (request, callback) => {\n  const tx = {\n    // master_addr: request.addressFrom,\n    message: request.message,\n    fee: request.fee,\n    xmss_pk: request.xmssPk,\n    xmss_ots_index: request.xmssOtsKey,\n    network: request.network,\n  }\n  // uses message transaction internally\n  qrlApi('getMessageTxn', tx, (err, response) => {\n    if (err) {\n      console.log(`Error:  ${err.message}`)\n      callback(err, null)\n    } else {\n      const transferResponse = {\n        txnHash: Buffer.from(\n          response.extended_transaction_unsigned.tx.transaction_hash\n        ).toString('hex'),\n        response,\n      }\n\n      callback(null, transferResponse)\n    }\n  })\n}\n\n// Create Github Txn\nconst createGithubTxn = (request, callback) => {\n  const tx = {\n    // master_addr: request.addressFrom,\n    message: request.message,\n    fee: request.fee,\n    xmss_pk: request.xmssPk,\n    xmss_ots_index: request.xmssOtsKey,\n    network: request.network,\n  }\n  // uses message transaction internally\n  qrlApi('getMessageTxn', tx, (err, response) => {\n    if (err) {\n      console.log(`Error:  ${err.message}`)\n      callback(err, null)\n    } else {\n      const transferResponse = {\n        txnHash: Buffer.from(\n          response.extended_transaction_unsigned.tx.transaction_hash\n        ).toString('hex'),\n        response,\n      }\n\n      callback(null, transferResponse)\n    }\n  })\n}\n\nconst confirmTokenCreation = (request, callback) => {\n  const confirmTxn = {\n    transaction_signed: request.extended_transaction_unsigned.tx,\n  }\n  const relayedThrough = []\n\n  // change ArrayBuffer\n  confirmTxn.transaction_signed.public_key = toBuffer(\n    confirmTxn.transaction_signed.public_key\n  )\n  confirmTxn.transaction_signed.transaction_hash = toBuffer(\n    confirmTxn.transaction_signed.transaction_hash\n  )\n  confirmTxn.transaction_signed.signature = toBuffer(\n    confirmTxn.transaction_signed.signature\n  )\n\n  confirmTxn.transaction_signed.token.symbol = toBuffer(\n    confirmTxn.transaction_signed.token.symbol\n  )\n  confirmTxn.transaction_signed.token.name = toBuffer(\n    confirmTxn.transaction_signed.token.name\n  )\n  confirmTxn.transaction_signed.token.owner = toBuffer(\n    confirmTxn.transaction_signed.token.owner\n  )\n\n  const initialBalances = confirmTxn.transaction_signed.token.initial_balances\n  const initialBalancesFormatted = []\n  initialBalances.forEach((item) => {\n    const itemFormatted = item\n    itemFormatted.address = toBuffer(item.address)\n    initialBalancesFormatted.push(itemFormatted)\n  })\n\n  // Overwrite initial_balances with our updated one\n  confirmTxn.transaction_signed.token.initial_balances = initialBalancesFormatted\n  confirmTxn.network = request.network\n\n  // Relay transaction through user node, then all default nodes.\n  let txnResponse\n\n  async.waterfall(\n    [\n      // Relay through user node.\n      function (wfcb) {\n        try {\n          qrlApi('pushTransaction', confirmTxn, (err, res) => {\n            if (err) {\n              console.log(\n                `Error: Failed to send transaction through ${res.relayed} - ${err}`\n              )\n              txnResponse = { error: err.message, response: err.message }\n              wfcb()\n            } else {\n              const hashResponse = {\n                txnHash: Buffer.from(\n                  confirmTxn.transaction_signed.transaction_hash\n                ).toString('hex'),\n                signature: Buffer.from(\n                  confirmTxn.transaction_signed.signature\n                ).toString('hex'),\n              }\n              txnResponse = { error: null, response: hashResponse }\n              relayedThrough.push(res.relayed)\n              console.log(`Transaction sent via ${res.relayed}`)\n              wfcb()\n            }\n          })\n        } catch (err) {\n          console.log(`Caught Error:  ${err}`)\n          txnResponse = { error: err, response: err }\n          wfcb()\n        }\n      },\n      /*\n    // Now relay through all default nodes that we have a connection too\n    function(wfcb) {\n      async.eachSeries(DEFAULT_NODES, (node, cb) => {\n        if ((qrlClient.hasOwnProperty(node.grpc) === true) && (node.grpc !== request.grpc)) {\n          try{\n            // Push the transaction - we don't care for its response\n            qrlClient[node.grpc].pushTransaction(confirmTxn, (err) => {\n              if (err) {\n                console.log(`Error: Failed to send transaction through ${node.grpc} - ${err}`)\n                cb()\n              } else {\n                console.log(`Token Creation Transaction sent via ${node.grpc}`)\n                relayedThrough.push(node.grpc)\n                cb()\n              }\n            })\n          } catch (err) {\n            console.log(`Error: Failed to send transaction through ${node.grpc} - ${err}`)\n            cb()\n          }\n        } else {\n          cb()\n        }\n      }, (err) => {\n        if (err) console.error(err.message)\n        console.log('All token creation txns sent')\n        wfcb()\n      })\n    },\n    */\n    ],\n    () => {\n      // All done, send txn response\n      txnResponse.relayed = relayedThrough\n      callback(null, txnResponse)\n    }\n  )\n}\n\nconst confirmMessageCreation = (request, callback) => {\n  const confirmTxn = {\n    transaction_signed: request.extended_transaction_unsigned.tx,\n  }\n  const relayedThrough = []\n\n  // change ArrayBuffer\n  confirmTxn.transaction_signed.public_key = toBuffer(\n    confirmTxn.transaction_signed.public_key\n  )\n  confirmTxn.transaction_signed.transaction_hash = toBuffer(\n    confirmTxn.transaction_signed.transaction_hash\n  )\n  confirmTxn.transaction_signed.signature = toBuffer(\n    confirmTxn.transaction_signed.signature\n  )\n\n  confirmTxn.transaction_signed.message.message_hash = toBuffer(\n    confirmTxn.transaction_signed.message.message_hash\n  )\n\n  confirmTxn.network = request.network\n\n  // Relay transaction through user node, then all default nodes.\n  let txnResponse\n\n  async.waterfall(\n    [\n      // Relay through user node.\n      function (wfcb) {\n        try {\n          qrlApi('pushTransaction', confirmTxn, (err, res) => {\n            if (err) {\n              console.log(\n                `Error: Failed to send transaction through ${res.relayed} - ${err}`\n              )\n              txnResponse = { error: err.message, response: err.message }\n              wfcb()\n            } else {\n              const hashResponse = {\n                txnHash: Buffer.from(\n                  confirmTxn.transaction_signed.transaction_hash\n                ).toString('hex'),\n                signature: Buffer.from(\n                  confirmTxn.transaction_signed.signature\n                ).toString('hex'),\n              }\n              txnResponse = { error: null, response: hashResponse }\n              relayedThrough.push(res.relayed)\n              console.log(`Transaction sent via ${res.relayed}`)\n              wfcb()\n            }\n          })\n        } catch (err) {\n          console.log(`Caught Error:  ${err}`)\n          txnResponse = { error: err, response: err }\n          wfcb()\n        }\n      },\n      /*\n    // Now relay through all default nodes that we have a connection too\n    function(wfcb) {\n      async.eachSeries(DEFAULT_NODES, (node, cb) => {\n        if ((qrlClient.hasOwnProperty(node.grpc) === true) && (node.grpc !== request.grpc)) {\n          try{\n            // Push the transaction - we don't care for its response\n            qrlClient[node.grpc].pushTransaction(confirmTxn, (err) => {\n              if (err) {\n                console.log(`Error: Failed to send transaction through ${node.grpc} - ${err}`)\n                cb()\n              } else {\n                console.log(`Token Creation Transaction sent via ${node.grpc}`)\n                relayedThrough.push(node.grpc)\n                cb()\n              }\n            })\n          } catch (err) {\n            console.log(`Error: Failed to send transaction through ${node.grpc} - ${err}`)\n            cb()\n          }\n        } else {\n          cb()\n        }\n      }, (err) => {\n        if (err) console.error(err.message)\n        console.log('All token creation txns sent')\n        wfcb()\n      })\n    },\n    */\n    ],\n    () => {\n      // All done, send txn response\n      txnResponse.relayed = relayedThrough\n      callback(null, txnResponse)\n    }\n  )\n}\n\nconst confirmKeybaseCreation = (request, callback) => {\n  const confirmTxn = {\n    transaction_signed: request.extended_transaction_unsigned.tx,\n  }\n  const relayedThrough = []\n\n  // change ArrayBuffer\n  confirmTxn.transaction_signed.public_key = toBuffer(\n    confirmTxn.transaction_signed.public_key\n  )\n  confirmTxn.transaction_signed.transaction_hash = toBuffer(\n    confirmTxn.transaction_signed.transaction_hash\n  )\n  confirmTxn.transaction_signed.signature = toBuffer(\n    confirmTxn.transaction_signed.signature\n  )\n\n  confirmTxn.transaction_signed.message.message_hash = toBuffer(\n    confirmTxn.transaction_signed.message.message_hash\n  )\n\n  confirmTxn.network = request.network\n\n  // Relay transaction through user node, then all default nodes.\n  let txnResponse\n\n  async.waterfall(\n    [\n      // Relay through user node.\n      function (wfcb) {\n        try {\n          qrlApi('pushTransaction', confirmTxn, (err, res) => {\n            if (err) {\n              console.log(\n                `Error: Failed to send transaction through ${res.relayed} - ${err}`\n              )\n              txnResponse = { error: err.message, response: err.message }\n              wfcb()\n            } else {\n              const hashResponse = {\n                txnHash: Buffer.from(\n                  confirmTxn.transaction_signed.transaction_hash\n                ).toString('hex'),\n                signature: Buffer.from(\n                  confirmTxn.transaction_signed.signature\n                ).toString('hex'),\n              }\n              txnResponse = { error: null, response: hashResponse }\n              relayedThrough.push(res.relayed)\n              console.log(`Transaction sent via ${res.relayed}`)\n              wfcb()\n            }\n          })\n        } catch (err) {\n          console.log(`Caught Error:  ${err}`)\n          txnResponse = { error: err, response: err }\n          wfcb()\n        }\n      },\n      /*\n    // Now relay through all default nodes that we have a connection too\n    function(wfcb) {\n      async.eachSeries(DEFAULT_NODES, (node, cb) => {\n        if ((qrlClient.hasOwnProperty(node.grpc) === true) && (node.grpc !== request.grpc)) {\n          try{\n            // Push the transaction - we don't care for its response\n            qrlClient[node.grpc].pushTransaction(confirmTxn, (err) => {\n              if (err) {\n                console.log(`Error: Failed to send transaction through ${node.grpc} - ${err}`)\n                cb()\n              } else {\n                console.log(`Token Creation Transaction sent via ${node.grpc}`)\n                relayedThrough.push(node.grpc)\n                cb()\n              }\n            })\n          } catch (err) {\n            console.log(`Error: Failed to send transaction through ${node.grpc} - ${err}`)\n            cb()\n          }\n        } else {\n          cb()\n        }\n      }, (err) => {\n        if (err) console.error(err.message)\n        console.log('All token creation txns sent')\n        wfcb()\n      })\n    },\n    */\n    ],\n    () => {\n      // All done, send txn response\n      txnResponse.relayed = relayedThrough\n      callback(null, txnResponse)\n    }\n  )\n}\n\nconst confirmGithubCreation = (request, callback) => {\n  const confirmTxn = {\n    transaction_signed: request.extended_transaction_unsigned.tx,\n  }\n  const relayedThrough = []\n\n  // change ArrayBuffer\n  confirmTxn.transaction_signed.public_key = toBuffer(\n    confirmTxn.transaction_signed.public_key\n  )\n  confirmTxn.transaction_signed.transaction_hash = toBuffer(\n    confirmTxn.transaction_signed.transaction_hash\n  )\n  confirmTxn.transaction_signed.signature = toBuffer(\n    confirmTxn.transaction_signed.signature\n  )\n\n  confirmTxn.transaction_signed.message.message_hash = toBuffer(\n    confirmTxn.transaction_signed.message.message_hash\n  )\n\n  confirmTxn.network = request.network\n\n  // Relay transaction through user node, then all default nodes.\n  let txnResponse\n\n  async.waterfall(\n    [\n      // Relay through user node.\n      function (wfcb) {\n        try {\n          qrlApi('pushTransaction', confirmTxn, (err, res) => {\n            if (err) {\n              console.log(\n                `Error: Failed to send transaction through ${res.relayed} - ${err}`\n              )\n              txnResponse = { error: err.message, response: err.message }\n              wfcb()\n            } else {\n              const hashResponse = {\n                txnHash: Buffer.from(\n                  confirmTxn.transaction_signed.transaction_hash\n                ).toString('hex'),\n                signature: Buffer.from(\n                  confirmTxn.transaction_signed.signature\n                ).toString('hex'),\n              }\n              txnResponse = { error: null, response: hashResponse }\n              relayedThrough.push(res.relayed)\n              console.log(`Transaction sent via ${res.relayed}`)\n              wfcb()\n            }\n          })\n        } catch (err) {\n          console.log(`Caught Error:  ${err}`)\n          txnResponse = { error: err, response: err }\n          wfcb()\n        }\n      },\n      /*\n    // Now relay through all default nodes that we have a connection too\n    function(wfcb) {\n      async.eachSeries(DEFAULT_NODES, (node, cb) => {\n        if ((qrlClient.hasOwnProperty(node.grpc) === true) && (node.grpc !== request.grpc)) {\n          try{\n            // Push the transaction - we don't care for its response\n            qrlClient[node.grpc].pushTransaction(confirmTxn, (err) => {\n              if (err) {\n                console.log(`Error: Failed to send transaction through ${node.grpc} - ${err}`)\n                cb()\n              } else {\n                console.log(`Token Creation Transaction sent via ${node.grpc}`)\n                relayedThrough.push(node.grpc)\n                cb()\n              }\n            })\n          } catch (err) {\n            console.log(`Error: Failed to send transaction through ${node.grpc} - ${err}`)\n            cb()\n          }\n        } else {\n          cb()\n        }\n      }, (err) => {\n        if (err) console.error(err.message)\n        console.log('All token creation txns sent')\n        wfcb()\n      })\n    },\n    */\n    ],\n    () => {\n      // All done, send txn response\n      txnResponse.relayed = relayedThrough\n      callback(null, txnResponse)\n    }\n  )\n}\n\n// Function to call GetTransferTokenTxn API\nconst createTokenTransferTxn = (request, callback) => {\n  const tx = {\n    // master_addr: request.addressFrom,\n    addresses_to: request.addresses_to,\n    amounts: request.amounts,\n    token_txhash: request.tokenHash,\n    fee: request.fee,\n    xmss_pk: request.xmssPk,\n    network: request.network,\n  }\n\n  qrlApi('getTransferTokenTxn', tx, (err, response) => {\n    if (err) {\n      console.log(`Error:  ${err.message}`)\n      callback(err, null)\n    } else {\n      const transferResponse = {\n        response,\n      }\n\n      callback(null, transferResponse)\n    }\n  })\n}\n\nconst confirmTokenTransfer = (request, callback) => {\n  const confirmTxn = {\n    transaction_signed: request.extended_transaction_unsigned.tx,\n  }\n  const relayedThrough = []\n\n  // change ArrayBuffer\n  confirmTxn.transaction_signed.public_key = toBuffer(\n    confirmTxn.transaction_signed.public_key\n  )\n  confirmTxn.transaction_signed.transaction_hash = toBuffer(\n    confirmTxn.transaction_signed.transaction_hash\n  )\n  confirmTxn.transaction_signed.signature = toBuffer(\n    confirmTxn.transaction_signed.signature\n  )\n  confirmTxn.transaction_signed.transfer_token.token_txhash = toBuffer(\n    confirmTxn.transaction_signed.transfer_token.token_txhash\n  )\n\n  const addrsTo = confirmTxn.transaction_signed.transfer_token.addrs_to\n  const addrsToFormatted = []\n  addrsTo.forEach((item) => {\n    const Fitem = toBuffer(item)\n    addrsToFormatted.push(Fitem)\n  })\n\n  // Overwrite addrs_to with our updated one\n  confirmTxn.transaction_signed.transfer_token.addrs_to = addrsToFormatted\n  confirmTxn.network = request.network\n\n  // Relay transaction through user node, then all default nodes.\n  let txnResponse\n\n  async.waterfall(\n    [\n      // Relay through user node.\n      function (wfcb) {\n        try {\n          qrlApi('pushTransaction', confirmTxn, (err, res) => {\n            if (err) {\n              console.log(\n                `Error: Failed to send transaction through ${res.relayed} - ${err}`\n              )\n              txnResponse = { error: err.message, response: err.message }\n              wfcb()\n            } else {\n              const hashResponse = {\n                txnHash: Buffer.from(\n                  confirmTxn.transaction_signed.transaction_hash\n                ).toString('hex'),\n                signature: Buffer.from(\n                  confirmTxn.transaction_signed.signature\n                ).toString('hex'),\n              }\n              txnResponse = { error: null, response: hashResponse }\n              relayedThrough.push(res.relayed)\n              console.log(`Transaction sent via ${res.relayed}`)\n              wfcb()\n            }\n          })\n        } catch (err) {\n          console.log(`Caught Error:  ${err}`)\n          txnResponse = { error: err, response: err }\n          wfcb()\n        }\n      },\n      /*\n    // Now relay through all default nodes that we have a connection too\n    function(wfcb) {\n      async.eachSeries(DEFAULT_NODES, (node, cb) => {\n        if ((qrlClient.hasOwnProperty(node.grpc) === true) && (node.grpc !== request.grpc)) {\n          try{\n            // Push the transaction - we don't care for its response\n            qrlClient[node.grpc].pushTransaction(confirmTxn, (err) => {\n              if (err) {\n                console.log(`Error: Failed to send transaction through ${node.grpc} - ${err}`)\n                cb()\n              } else {\n                console.log(`Token transfer Transaction sent via ${node.grpc}`)\n                relayedThrough.push(node.grpc)\n                cb()\n              }\n            })\n          } catch (err) {\n            console.log(`Error: Failed to send transaction through ${node.grpc} - ${err}`)\n            cb()\n          }\n        } else {\n          cb()\n        }\n      }, (err) => {\n        if (err) console.error(err.message)\n        console.log('All token transfer txns sent')\n        wfcb()\n      })\n    },\n    */\n    ],\n    () => {\n      // All done, send txn response\n      txnResponse.relayed = relayedThrough\n      callback(null, txnResponse)\n    }\n  )\n}\n\nconst apiCall = (apiUrl, callback) => {\n  try {\n    const response = HTTP.get(apiUrl).data\n    // Successful call\n    callback(null, response)\n  } catch (error) {\n    const myError = new Meteor.Error(500, 'Cannot access the API')\n    callback(myError, null)\n  }\n}\n\n// Ledger Nano S Integration for Electron Desktop Apps\n\nlet transport = null\n\nasync function createTransport() {\n  transport = await TransportNodeHid.create(10)\n  const qrl = await new Qrl(transport)\n  return qrl\n}\n\nconst ledgerGetState = async (request, cb) => {\n  const QrlLedger = await createTransport()\n  await QrlLedger.get_state().then(async (data) => {\n    console.log(data)\n    await transport.close().then(() => {\n      cb(null, data)\n    })\n  })\n}\nconst ledgerPublicKey = async (request, cb) => {\n  const QrlLedger = await createTransport()\n  await QrlLedger.publickey().then(async (data) => {\n    console.log(data)\n    await transport.close().then(() => {\n      cb(null, data)\n    })\n  })\n}\nconst ledgerAppVersion = async (request, cb) => {\n  const QrlLedger = await createTransport()\n  await QrlLedger.get_version().then(async (data) => {\n    await transport.close().then(() => {\n      cb(null, data)\n    })\n  })\n}\nconst ledgerLibraryVersion = async (request, cb) => {\n  const QrlLedger = await createTransport()\n  await QrlLedger.library_version().then(async (data) => {\n    await transport.close().then(() => {\n      cb(null, data)\n    })\n  })\n}\nconst ledgerVerifyAddress = async (request, cb) => {\n  const QrlLedger = await createTransport()\n  await QrlLedger.viewAddress().then(async (data) => {\n    await transport.close().then(() => {\n      cb(null, data)\n    })\n  })\n}\nconst ledgerCreateTx = async (sourceAddr, fee, destAddr, destAmount, cb) => {\n  const sourceAddrBuffer = Buffer.from(sourceAddr)\n  const feeBuffer = Buffer.from(fee)\n\n  const destAddrFinal = []\n  const destAmountFinal = []\n  for (let i = 0; i < destAddr.length; i += 1) {\n    destAddrFinal.push(Buffer.from(destAddr[i]))\n    destAmountFinal.push(Buffer.from(destAmount[i]))\n  }\n\n  const QrlLedger = await createTransport()\n  await QrlLedger.createTx(\n    sourceAddrBuffer,\n    feeBuffer,\n    destAddrFinal,\n    destAmountFinal\n  ).then(async (data) => {\n    await transport.close().then(() => {\n      cb(null, data)\n    })\n  })\n}\nconst ledgerRetrieveSignature = async (txn, cb) => {\n  const QrlLedger = await createTransport()\n  await QrlLedger.retrieveSignature(txn).then(async (data) => {\n    await transport.close().then(() => {\n      cb(null, data)\n    })\n  })\n}\nconst ledgerSetIdx = async (otsKey, cb) => {\n  const QrlLedger = await createTransport()\n  await QrlLedger.setIdx(otsKey).then(async (idxResponse) => {\n    await transport.close().then(() => {\n      cb(null, idxResponse)\n    })\n  })\n}\nconst ledgerCreateMessageTx = async (sourceAddr, fee, message, cb) => {\n  const sourceAddrBuffer = Buffer.from(sourceAddr)\n  const feeBuffer = Buffer.from(fee)\n  const messageBuffer = Buffer.from(message)\n\n  const QrlLedger = await createTransport()\n  await QrlLedger.createMessageTx(\n    sourceAddrBuffer,\n    feeBuffer,\n    messageBuffer\n  ).then(async (data) => {\n    await transport.close().then(() => {\n      cb(null, data)\n    })\n  })\n}\n\n// Define Meteor Methods\nMeteor.methods({\n  connectToNode(request) {\n    this.unblock()\n    check(request, String)\n    const response = Meteor.wrapAsync(connectToNode)(request)\n    return response\n  },\n  checkNetworkHealth(request) {\n    this.unblock()\n    check(request, String)\n    const response = Meteor.wrapAsync(checkNetworkHealth)(request)\n    return response\n  },\n  status(request) {\n    this.unblock()\n    check(request, Object)\n    const response = Meteor.wrapAsync(getStats)(request)\n    return response\n  },\n  getPeers(request) {\n    this.unblock()\n    check(request, Object)\n    const response = Meteor.wrapAsync(getKnownPeers)(request)\n    return response\n  },\n  getHeight(request) {\n    this.unblock()\n    check(request, Object)\n    const response = Meteor.wrapAsync(getHeight)(request)\n    return response\n  },\n  getObject(request) {\n    check(request, Object)\n    this.unblock()\n    const response = Meteor.wrapAsync(getObject)(request)\n    return response\n  },\n  getAddressState(request) {\n    this.unblock()\n    check(request, Object)\n    const response = Meteor.wrapAsync(getAddressState)(request)\n    return response\n  },\n  getFullAddressState(request) {\n    check(request, Object)\n    this.unblock()\n    const response = Meteor.wrapAsync(getFullAddressState)(request)\n    return response\n  },\n  getMultiSigAddressState(request) {\n    this.unblock()\n    check(request, Object)\n    const response = Meteor.wrapAsync(getMultiSigAddressState)(request)\n    return response\n  },\n  getTransactionsByAddress(request) {\n    check(request, Object)\n    this.unblock()\n    const response = Meteor.wrapAsync(getTransactionsByAddress)(request)\n    return helpersaddressTransactions(response)\n  },\n  getTokensByAddress(request) {\n    check(request, Object)\n    this.unblock()\n    const response = Meteor.wrapAsync(getTokensByAddress)(request)\n    return response\n  },\n  getMultiSigAddressesByAddress(request) {\n    check(request, Object)\n    this.unblock()\n    const response = Meteor.wrapAsync(getMultiSigAddressesByAddress)(request)\n    console.table(response)\n    return response\n  },\n  getMultiSigSpendTxsByAddress(request) {\n    check(request, Object)\n    this.unblock()\n    const response = Meteor.wrapAsync(getMultiSigSpendTxsByAddress)(request)\n    console.table(response)\n    return response\n  },\n  getTxnHash(request) {\n    this.unblock()\n    check(request, Object)\n    const response = Meteor.wrapAsync(getTxnHash)(request)\n    return response\n  },\n\n  txhash(request) {\n    this.unblock()\n    check(request, Object)\n    let output\n    // asynchronous call to API\n    const response = Meteor.wrapAsync(getTxnHash)(request)\n    if (response.transaction.tx.transactionType === 'transfer_token') {\n      // Request Token Decimals / Symbol\n      const symbolRequest = {\n        query: Buffer.from(\n          response.transaction.tx.transfer_token.token_txhash\n        ).toString('hex'),\n        network: request.network,\n      }\n\n      const thisSymbolResponse = Meteor.wrapAsync(getTxnHash)(symbolRequest)\n      output = helpers.parseTokenAndTransferTokenTx(\n        thisSymbolResponse,\n        response\n      )\n    } else {\n      output = helpers.txhash(response)\n    }\n    return output\n  },\n\n  transferCoins(request) {\n    this.unblock()\n    check(request, Object)\n    const response = Meteor.wrapAsync(transferCoins)(request)\n    return response\n  },\n  createMultiSig(request) {\n    this.unblock()\n    check(request, Object)\n    const response = Meteor.wrapAsync(createMultiSig)(request)\n    return response\n  },\n  spendMultiSig(request) {\n    this.unblock()\n    check(request, Object)\n    const response = Meteor.wrapAsync(spendMultiSig)(request)\n    return response\n  },\n  voteMultiSig(request) {\n    this.unblock()\n    check(request, Object)\n    const response = Meteor.wrapAsync(voteMultiSig)(request)\n    return response\n  },\n  getOTS(request) {\n    check(request, Object)\n    this.unblock()\n    const response = Meteor.wrapAsync(getOTS)(request)\n    return response\n  },\n  addressTransactions(request) {\n    check(request, Object)\n    const targets = request.tx\n    const result = []\n\n    targets.forEach((arr) => {\n      const thisRequest = {\n        query: arr.txhash,\n        network: request.network,\n      }\n\n      try {\n        const thisTxnHashResponse = Meteor.wrapAsync(getTxnHash)(thisRequest)\n\n        const output = helpers.txhash(thisTxnHashResponse)\n\n        let thisTxn = {}\n\n        if (output.transaction.tx.transactionType === 'transfer') {\n          thisTxn = {\n            type: output.transaction.tx.transactionType,\n            txhash: arr.txhash,\n            totalTransferred: output.transaction.explorer.totalTransferred,\n            outputs: output.transaction.explorer.outputs,\n            from_hex: output.transaction.explorer.from_hex,\n            from_b32: output.transaction.explorer.from_b32,\n            ots_key: parseInt(\n              output.transaction.tx.signature.substring(0, 8),\n              16\n            ),\n            fee: output.transaction.tx.fee,\n            block: output.transaction.header.block_number,\n            timestamp: output.transaction.header.timestamp_seconds,\n          }\n          result.push(thisTxn)\n        } else if (output.transaction.tx.transactionType === 'token') {\n          thisTxn = {\n            type: output.transaction.tx.transactionType,\n            txhash: arr.txhash,\n            from_hex: output.transaction.explorer.from_hex,\n            from_b32: output.transaction.explorer.from_b32,\n            symbol: output.transaction.tx.token.symbol,\n            name: output.transaction.tx.token.name,\n            decimals: output.transaction.tx.token.decimals,\n            ots_key: parseInt(\n              output.transaction.tx.signature.substring(0, 8),\n              16\n            ),\n            fee: output.transaction.tx.fee,\n            block: output.transaction.header.block_number,\n            timestamp: output.transaction.header.timestamp_seconds,\n          }\n\n          result.push(thisTxn)\n        } else if (\n          thisTxnHashResponse.transaction.tx.transactionType\n          === 'transfer_token'\n        ) {\n          // Request Token Symbol\n          const symbolRequest = {\n            query: Buffer.from(\n              Buffer.from(\n                thisTxnHashResponse.transaction.tx.transfer_token.token_txhash\n              ).toString('hex'),\n              'hex'\n            ),\n            network: request.network,\n          }\n          const thisSymbolResponse = Meteor.wrapAsync(getTxnHash)(symbolRequest)\n          const helpersResponse = helpers.parseTokenAndTransferTokenTx(\n            thisSymbolResponse,\n            thisTxnHashResponse\n          )\n          thisTxn = {\n            type: helpersResponse.transaction.tx.transactionType,\n            txhash: arr.txhash,\n            symbol: helpersResponse.transaction.explorer.symbol,\n            // eslint-disable-next-line\n            totalTransferred:\n              helpersResponse.transaction.explorer.totalTransferred,\n            outputs: helpersResponse.transaction.explorer.outputs,\n            from_hex: helpersResponse.transaction.explorer.from_hex,\n            from_b32: helpersResponse.transaction.explorer.from_b32,\n            ots_key: parseInt(\n              helpersResponse.transaction.tx.signature.substring(0, 8),\n              16\n            ),\n            fee: helpersResponse.transaction.tx.fee / SHOR_PER_QUANTA,\n            block: helpersResponse.transaction.header.block_number,\n            timestamp: helpersResponse.transaction.header.timestamp_seconds,\n          }\n\n          result.push(thisTxn)\n        } else if (output.transaction.tx.transactionType === 'coinbase') {\n          thisTxn = {\n            type: output.transaction.tx.transactionType,\n            txhash: arr.txhash,\n            amount: output.transaction.tx.coinbase.amount / SHOR_PER_QUANTA,\n            from_hex: output.transaction.explorer.from_hex,\n            from_b32: output.transaction.explorer.from_b32,\n            to: output.transaction.tx.coinbase.addr_to,\n            ots_key: '',\n            fee: output.transaction.tx.fee / SHOR_PER_QUANTA,\n            block: output.transaction.header.block_number,\n            timestamp: output.transaction.header.timestamp_seconds,\n          }\n          result.push(thisTxn)\n        } else if (output.transaction.tx.transactionType === 'slave') {\n          thisTxn = {\n            type: output.transaction.tx.transactionType,\n            txhash: arr.txhash,\n            amount: 0,\n            from_hex: output.transaction.explorer.from_hex,\n            from_b32: output.transaction.explorer.from_b32,\n            to: '',\n            ots_key: parseInt(\n              output.transaction.tx.signature.substring(0, 8),\n              16\n            ),\n            fee: output.transaction.tx.fe,\n            block: output.transaction.header.block_number,\n            timestamp: output.transaction.header.timestamp_seconds,\n          }\n          result.push(thisTxn)\n        } else if (output.transaction.tx.transactionType === 'latticePK') {\n          thisTxn = {\n            type: output.transaction.tx.transactionType,\n            txhash: arr.txhash,\n            amount: 0,\n            from_hex: output.transaction.explorer.from_hex,\n            from_b32: output.transaction.explorer.from_b32,\n            to: '',\n            ots_key: parseInt(\n              output.transaction.tx.signature.substring(0, 8),\n              16\n            ),\n            fee: output.transaction.tx.fee,\n            block: output.transaction.header.block_number,\n            timestamp: output.transaction.header.timestamp_seconds,\n          }\n          result.push(thisTxn)\n        } else if (output.transaction.explorer.type === 'MESSAGE') {\n          thisTxn = {\n            type: output.transaction.explorer.type,\n            txhash: arr.txhash,\n            amount: 0,\n            from_hex: output.transaction.explorer.from_hex,\n            from_b32: output.transaction.explorer.from_b32,\n            to: '',\n            ots_key: parseInt(\n              output.transaction.tx.signature.substring(0, 8),\n              16\n            ),\n            fee: output.transaction.tx.fee,\n            block: output.transaction.header.block_number,\n            timestamp: output.transaction.header.timestamp_seconds,\n          }\n          result.push(thisTxn)\n        } else if (\n          output.transaction.explorer.type === 'DOCUMENT_NOTARISATION'\n        ) {\n          thisTxn = {\n            type: output.transaction.explorer.type,\n            txhash: arr.txhash,\n            amount: 0,\n            from_hex: output.transaction.explorer.from_hex,\n            from_b32: output.transaction.explorer.from_b32,\n            to: '',\n            ots_key: parseInt(\n              output.transaction.tx.signature.substring(0, 8),\n              16\n            ),\n            fee: output.transaction.tx.fee,\n            block: output.transaction.header.block_number,\n            timestamp: output.transaction.header.timestamp_seconds,\n          }\n          result.push(thisTxn)\n        }\n      } catch (err) {\n        console.log(\n          `Error fetching transaction hash in addressTransactions '${arr.txhash}' - ${err}`\n        )\n      }\n    })\n\n    return result\n  },\n  confirmTransaction(request) {\n    this.unblock()\n    check(request, Object)\n    const response = Meteor.wrapAsync(confirmTransaction)(request)\n    return response\n  },\n  confirmMultiSigCreate(request) {\n    this.unblock()\n    check(request, Object)\n    const response = Meteor.wrapAsync(confirmMultiSigCreate)(request)\n    return response\n  },\n  confirmMultiSigSpend(request) {\n    this.unblock()\n    check(request, Object)\n    const response = Meteor.wrapAsync(confirmMultiSigSpend)(request)\n    return response\n  },\n  confirmMultiSigVote(request) {\n    this.unblock()\n    check(request, Object)\n    const response = Meteor.wrapAsync(confirmMultiSigVote)(request)\n    return response\n  },\n  createMessageTxn(request) {\n    this.unblock()\n    check(request, Object)\n    const response = Meteor.wrapAsync(createMessageTxn)(request)\n    return response\n  },\n  createKeybaseTxn(request) {\n    this.unblock()\n    check(request, Object)\n    const response = Meteor.wrapAsync(createKeybaseTxn)(request)\n    return response\n  },\n  createGithubTxn(request) {\n    this.unblock()\n    check(request, Object)\n    const response = Meteor.wrapAsync(createGithubTxn)(request)\n    return response\n  },\n  confirmMessageCreation(request) {\n    this.unblock()\n    check(request, Object)\n    const response = Meteor.wrapAsync(confirmMessageCreation)(request)\n    return response\n  },\n  confirmKeybaseCreation(request) {\n    this.unblock()\n    check(request, Object)\n    const response = Meteor.wrapAsync(confirmKeybaseCreation)(request)\n    return response\n  },\n  confirmGithubCreation(request) {\n    this.unblock()\n    check(request, Object)\n    const response = Meteor.wrapAsync(confirmGithubCreation)(request)\n    return response\n  },\n  createTokenTxn(request) {\n    this.unblock()\n    check(request, Object)\n    const response = Meteor.wrapAsync(createTokenTxn)(request)\n    return response\n  },\n  confirmTokenCreation(request) {\n    this.unblock()\n    check(request, Object)\n    const response = Meteor.wrapAsync(confirmTokenCreation)(request)\n    return response\n  },\n  createTokenTransferTxn(request) {\n    this.unblock()\n    check(request, Object)\n    const response = Meteor.wrapAsync(createTokenTransferTxn)(request)\n    return response\n  },\n  confirmTokenTransfer(request) {\n    this.unblock()\n    check(request, Object)\n    const response = Meteor.wrapAsync(confirmTokenTransfer)(request)\n    return response\n  },\n  QRLvalue() {\n    this.unblock()\n    const apiUrl = 'https://bittrex.com/api/v1.1/public/getmarketsummary?market=btc-qrl'\n    const apiUrlUSD = 'https://bittrex.com/api/v1.1/public/getmarketsummary?market=usdt-btc'\n    // asynchronous call to API\n    const response = Meteor.wrapAsync(apiCall)(apiUrl)\n    const responseUSD = Meteor.wrapAsync(apiCall)(apiUrlUSD)\n    const usd = response.result[0].Last * responseUSD.result[0].Last\n    return usd\n  },\n  ledgerGetState(request) {\n    this.unblock()\n    check(request, Array)\n    const response = Meteor.wrapAsync(ledgerGetState)(request)\n    console.log('res')\n    console.log(response)\n    return response\n  },\n  ledgerPublicKey(request) {\n    this.unblock()\n    check(request, Array)\n    const response = Meteor.wrapAsync(ledgerPublicKey)(request)\n    return response\n  },\n  ledgerAppVersion(request) {\n    this.unblock()\n    check(request, Array)\n    const response = Meteor.wrapAsync(ledgerAppVersion)(request)\n    return response\n  },\n  ledgerLibraryVersion(request) {\n    this.unblock()\n    check(request, Array)\n    const response = Meteor.wrapAsync(ledgerLibraryVersion)(request)\n    return response\n  },\n  ledgerVerifyAddress(request) {\n    this.unblock()\n    check(request, Array)\n    const response = Meteor.wrapAsync(ledgerVerifyAddress)(request)\n    return response\n  },\n  ledgerCreateTx(sourceAddr, fee, destAddr, destAmount) {\n    this.unblock()\n    check(sourceAddr, Match.Any)\n    check(fee, Match.Any)\n    check(destAddr, Match.Any)\n    check(destAmount, Match.Any)\n\n    console.log(\n      '2: sourceAddr: ',\n      sourceAddr,\n      ' - fee: ',\n      fee,\n      ' - destAddr: ',\n      destAddr,\n      ' - destAmount: ',\n      destAmount\n    )\n\n    const response = Meteor.wrapAsync(ledgerCreateTx)(\n      sourceAddr,\n      fee,\n      destAddr,\n      destAmount\n    )\n    return response\n  },\n  ledgerCreateMessageTx(sourceAddr, fee, message) {\n    this.unblock()\n    check(sourceAddr, Match.Any)\n    check(fee, Match.Any)\n    check(message, Match.Any)\n    const response = Meteor.wrapAsync(ledgerCreateMessageTx)(\n      sourceAddr,\n      fee,\n      message\n    )\n    return response\n  },\n  ledgerRetrieveSignature(request) {\n    this.unblock()\n    check(request, Match.Any)\n    const response = Meteor.wrapAsync(ledgerRetrieveSignature)(request)\n    return response\n  },\n  ledgerSetIdx(request) {\n    this.unblock()\n    check(request, Match.Any)\n    const response = Meteor.wrapAsync(ledgerSetIdx)(request)\n    return response\n  },\n})\n\n// Server Startup commands\nif (Meteor.isServer) {\n  Meteor.startup(() => {\n    console.log(`QRL Wallet Starting - Version: ${WALLET_VERSION}`)\n\n    // Attempt to create connections with all nodes\n    connectNodes()\n  })\n}\n\n// Maintain node connection status\nMeteor.setInterval(() => {\n  console.log('Refreshing node connection status')\n\n  // Maintain state of connections to all nodes\n  connectNodes()\n}, 60000)\n","module.exports = {\n  // - - - - WEBDRIVER-IO  - - - -\n  webdriverio: {\n    desiredCapabilities: {\n      chromeOptions: {\n        args: [\"headless\", \"disable-gpu\", \"no-sandbox\"]\n      },\n      isHeadless: true\n    }\n  },\n};","// Server entry point, imports all server code\nimport '/imports/startup/both'\nimport '/imports/startup/server'\n"]}